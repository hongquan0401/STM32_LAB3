
Lab_3 main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08002c3c  08002c3c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c3c  08002c3c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08002c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000050  08002c94  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  08002c94  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009892  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bab  00000000  00000000  0002990b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d03  00000000  00000000  0002c8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb21  00000000  00000000  000435cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082460  00000000  00000000  0004f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d154c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000d15a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000050 	.word	0x20000050
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c00 	.word	0x08002c00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000054 	.word	0x20000054
 8000148:	08002c00 	.word	0x08002c00

0800014c <isButton1Pressed>:
	KeyReg2 = NORMAL_STATE;

int KeyReg3 = NORMAL_STATE;
int TimerForKeyPress = 200;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000006c 	.word	0x2000006c

08000170 <getKeyInput1>:

void getKeyInput1(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	KeyReg0 = KeyReg1;
 8000174:	4b1f      	ldr	r3, [pc, #124]	; (80001f4 <getKeyInput1+0x84>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a1f      	ldr	r2, [pc, #124]	; (80001f8 <getKeyInput1+0x88>)
 800017a:	6013      	str	r3, [r2, #0]
	KeyReg1 = KeyReg2;
 800017c:	4b1f      	ldr	r3, [pc, #124]	; (80001fc <getKeyInput1+0x8c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a1c      	ldr	r2, [pc, #112]	; (80001f4 <getKeyInput1+0x84>)
 8000182:	6013      	str	r3, [r2, #0]
	KeyReg2 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	481d      	ldr	r0, [pc, #116]	; (8000200 <getKeyInput1+0x90>)
 800018a:	f001 fd19 	bl	8001bc0 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b1a      	ldr	r3, [pc, #104]	; (80001fc <getKeyInput1+0x8c>)
 8000194:	601a      	str	r2, [r3, #0]
	if ((KeyReg0 == KeyReg1) && (KeyReg1 == KeyReg2)){
 8000196:	4b18      	ldr	r3, [pc, #96]	; (80001f8 <getKeyInput1+0x88>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b16      	ldr	r3, [pc, #88]	; (80001f4 <getKeyInput1+0x84>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d126      	bne.n	80001f0 <getKeyInput1+0x80>
 80001a2:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <getKeyInput1+0x84>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b15      	ldr	r3, [pc, #84]	; (80001fc <getKeyInput1+0x8c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d120      	bne.n	80001f0 <getKeyInput1+0x80>
		if (KeyReg3 != KeyReg2) {
 80001ae:	4b15      	ldr	r3, [pc, #84]	; (8000204 <getKeyInput1+0x94>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <getKeyInput1+0x8c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d00e      	beq.n	80001d8 <getKeyInput1+0x68>
			KeyReg3 = KeyReg2;
 80001ba:	4b10      	ldr	r3, [pc, #64]	; (80001fc <getKeyInput1+0x8c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a11      	ldr	r2, [pc, #68]	; (8000204 <getKeyInput1+0x94>)
 80001c0:	6013      	str	r3, [r2, #0]
			if (KeyReg2 == PRESSED_STATE){                    // XU LY NHAN THA
 80001c2:	4b0e      	ldr	r3, [pc, #56]	; (80001fc <getKeyInput1+0x8c>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d112      	bne.n	80001f0 <getKeyInput1+0x80>
				//TODO
				button1_flag = 1;
 80001ca:	4b0f      	ldr	r3, [pc, #60]	; (8000208 <getKeyInput1+0x98>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
				TimerForKeyPress = 200;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <getKeyInput1+0x9c>)
 80001d2:	22c8      	movs	r2, #200	; 0xc8
 80001d4:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 80001d6:	e00b      	b.n	80001f0 <getKeyInput1+0x80>
			TimerForKeyPress--;
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <getKeyInput1+0x9c>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3b01      	subs	r3, #1
 80001de:	4a0b      	ldr	r2, [pc, #44]	; (800020c <getKeyInput1+0x9c>)
 80001e0:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0){
 80001e2:	4b0a      	ldr	r3, [pc, #40]	; (800020c <getKeyInput1+0x9c>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d102      	bne.n	80001f0 <getKeyInput1+0x80>
				TimerForKeyPress = 200;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <getKeyInput1+0x9c>)
 80001ec:	22c8      	movs	r2, #200	; 0xc8
 80001ee:	601a      	str	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000000 	.word	0x20000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	40011000 	.word	0x40011000
 8000204:	2000000c 	.word	0x2000000c
 8000208:	2000006c 	.word	0x2000006c
 800020c:	20000010 	.word	0x20000010

08000210 <isButton2Pressed>:
	KeyReg11 = NORMAL_STATE,
	KeyReg12 = NORMAL_STATE;

int KeyReg13 = NORMAL_STATE;

int isButton2Pressed(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <isButton2Pressed+0x20>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d104      	bne.n	8000226 <isButton2Pressed+0x16>
		button2_flag = 0;
 800021c:	4b04      	ldr	r3, [pc, #16]	; (8000230 <isButton2Pressed+0x20>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		return 1;
 8000222:	2301      	movs	r3, #1
 8000224:	e000      	b.n	8000228 <isButton2Pressed+0x18>
	}
	return 0;
 8000226:	2300      	movs	r3, #0
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000070 	.word	0x20000070

08000234 <getKeyInput2>:

void getKeyInput2(){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	KeyReg10 = KeyReg11;
 8000238:	4b1f      	ldr	r3, [pc, #124]	; (80002b8 <getKeyInput2+0x84>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <getKeyInput2+0x88>)
 800023e:	6013      	str	r3, [r2, #0]
	KeyReg11 = KeyReg12;
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <getKeyInput2+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a1c      	ldr	r2, [pc, #112]	; (80002b8 <getKeyInput2+0x84>)
 8000246:	6013      	str	r3, [r2, #0]
	KeyReg12 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000248:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800024c:	481d      	ldr	r0, [pc, #116]	; (80002c4 <getKeyInput2+0x90>)
 800024e:	f001 fcb7 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000252:	4603      	mov	r3, r0
 8000254:	461a      	mov	r2, r3
 8000256:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <getKeyInput2+0x8c>)
 8000258:	601a      	str	r2, [r3, #0]
	if ((KeyReg10 == KeyReg11) && (KeyReg11 == KeyReg12)){
 800025a:	4b18      	ldr	r3, [pc, #96]	; (80002bc <getKeyInput2+0x88>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <getKeyInput2+0x84>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	429a      	cmp	r2, r3
 8000264:	d126      	bne.n	80002b4 <getKeyInput2+0x80>
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <getKeyInput2+0x84>)
 8000268:	681a      	ldr	r2, [r3, #0]
 800026a:	4b15      	ldr	r3, [pc, #84]	; (80002c0 <getKeyInput2+0x8c>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	429a      	cmp	r2, r3
 8000270:	d120      	bne.n	80002b4 <getKeyInput2+0x80>
		if (KeyReg13 != KeyReg12) {
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <getKeyInput2+0x94>)
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <getKeyInput2+0x8c>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	429a      	cmp	r2, r3
 800027c:	d00e      	beq.n	800029c <getKeyInput2+0x68>
			KeyReg13 = KeyReg12;
 800027e:	4b10      	ldr	r3, [pc, #64]	; (80002c0 <getKeyInput2+0x8c>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <getKeyInput2+0x94>)
 8000284:	6013      	str	r3, [r2, #0]
			if (KeyReg12 == PRESSED_STATE){                    // XU LY NHAN THA
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <getKeyInput2+0x8c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d112      	bne.n	80002b4 <getKeyInput2+0x80>
				//TODO
				button2_flag = 1;
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <getKeyInput2+0x98>)
 8000290:	2201      	movs	r2, #1
 8000292:	601a      	str	r2, [r3, #0]
				TimerForKeyPress = 200;
 8000294:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <getKeyInput2+0x9c>)
 8000296:	22c8      	movs	r2, #200	; 0xc8
 8000298:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 800029a:	e00b      	b.n	80002b4 <getKeyInput2+0x80>
			TimerForKeyPress--;
 800029c:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <getKeyInput2+0x9c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a0b      	ldr	r2, [pc, #44]	; (80002d0 <getKeyInput2+0x9c>)
 80002a4:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0){
 80002a6:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <getKeyInput2+0x9c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d102      	bne.n	80002b4 <getKeyInput2+0x80>
				TimerForKeyPress = 200;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <getKeyInput2+0x9c>)
 80002b0:	22c8      	movs	r2, #200	; 0xc8
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000018 	.word	0x20000018
 80002bc:	20000014 	.word	0x20000014
 80002c0:	2000001c 	.word	0x2000001c
 80002c4:	40011000 	.word	0x40011000
 80002c8:	20000020 	.word	0x20000020
 80002cc:	20000070 	.word	0x20000070
 80002d0:	20000010 	.word	0x20000010

080002d4 <isButton3Pressed>:
	KeyReg21 = NORMAL_STATE,
	KeyReg22 = NORMAL_STATE;

int KeyReg23 = NORMAL_STATE;

int isButton3Pressed(){
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80002d8:	4b06      	ldr	r3, [pc, #24]	; (80002f4 <isButton3Pressed+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b01      	cmp	r3, #1
 80002de:	d104      	bne.n	80002ea <isButton3Pressed+0x16>
		button3_flag = 0;
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <isButton3Pressed+0x20>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
		return 1;
 80002e6:	2301      	movs	r3, #1
 80002e8:	e000      	b.n	80002ec <isButton3Pressed+0x18>
	}
	return 0;
 80002ea:	2300      	movs	r3, #0
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	20000074 	.word	0x20000074

080002f8 <getKeyInput3>:

void getKeyInput3(){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	KeyReg20 = KeyReg21;
 80002fc:	4b1f      	ldr	r3, [pc, #124]	; (800037c <getKeyInput3+0x84>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a1f      	ldr	r2, [pc, #124]	; (8000380 <getKeyInput3+0x88>)
 8000302:	6013      	str	r3, [r2, #0]
	KeyReg21 = KeyReg22;
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <getKeyInput3+0x8c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a1c      	ldr	r2, [pc, #112]	; (800037c <getKeyInput3+0x84>)
 800030a:	6013      	str	r3, [r2, #0]
	KeyReg22 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 800030c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000310:	481d      	ldr	r0, [pc, #116]	; (8000388 <getKeyInput3+0x90>)
 8000312:	f001 fc55 	bl	8001bc0 <HAL_GPIO_ReadPin>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <getKeyInput3+0x8c>)
 800031c:	601a      	str	r2, [r3, #0]
	if ((KeyReg20 == KeyReg21) && (KeyReg21 == KeyReg22)){
 800031e:	4b18      	ldr	r3, [pc, #96]	; (8000380 <getKeyInput3+0x88>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	4b16      	ldr	r3, [pc, #88]	; (800037c <getKeyInput3+0x84>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	429a      	cmp	r2, r3
 8000328:	d126      	bne.n	8000378 <getKeyInput3+0x80>
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <getKeyInput3+0x84>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <getKeyInput3+0x8c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	429a      	cmp	r2, r3
 8000334:	d120      	bne.n	8000378 <getKeyInput3+0x80>
		if (KeyReg23 != KeyReg22) {
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <getKeyInput3+0x94>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	4b12      	ldr	r3, [pc, #72]	; (8000384 <getKeyInput3+0x8c>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d00e      	beq.n	8000360 <getKeyInput3+0x68>
			KeyReg23 = KeyReg22;
 8000342:	4b10      	ldr	r3, [pc, #64]	; (8000384 <getKeyInput3+0x8c>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a11      	ldr	r2, [pc, #68]	; (800038c <getKeyInput3+0x94>)
 8000348:	6013      	str	r3, [r2, #0]
			if (KeyReg22 == PRESSED_STATE){                    // XU LY NHAN THA
 800034a:	4b0e      	ldr	r3, [pc, #56]	; (8000384 <getKeyInput3+0x8c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d112      	bne.n	8000378 <getKeyInput3+0x80>
				//TODO
				button3_flag = 1;
 8000352:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <getKeyInput3+0x98>)
 8000354:	2201      	movs	r2, #1
 8000356:	601a      	str	r2, [r3, #0]
				TimerForKeyPress = 200;
 8000358:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <getKeyInput3+0x9c>)
 800035a:	22c8      	movs	r2, #200	; 0xc8
 800035c:	601a      	str	r2, [r3, #0]
				}
				TimerForKeyPress = 200;
			}
		}
	}
}
 800035e:	e00b      	b.n	8000378 <getKeyInput3+0x80>
			TimerForKeyPress--;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <getKeyInput3+0x9c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <getKeyInput3+0x9c>)
 8000368:	6013      	str	r3, [r2, #0]
			if (TimerForKeyPress == 0){
 800036a:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <getKeyInput3+0x9c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d102      	bne.n	8000378 <getKeyInput3+0x80>
				TimerForKeyPress = 200;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <getKeyInput3+0x9c>)
 8000374:	22c8      	movs	r2, #200	; 0xc8
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000028 	.word	0x20000028
 8000380:	20000024 	.word	0x20000024
 8000384:	2000002c 	.word	0x2000002c
 8000388:	40011000 	.word	0x40011000
 800038c:	20000030 	.word	0x20000030
 8000390:	20000074 	.word	0x20000074
 8000394:	20000010 	.word	0x20000010

08000398 <update_buffer>:
 */

#include "display_7seg.h"
#include "main.h"

void update_buffer(){
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	led_buffer[0] = counter1/10;
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <update_buffer+0x70>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <update_buffer+0x74>)
 80003a2:	fb82 1203 	smull	r1, r2, r2, r3
 80003a6:	1092      	asrs	r2, r2, #2
 80003a8:	17db      	asrs	r3, r3, #31
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	4a18      	ldr	r2, [pc, #96]	; (8000410 <update_buffer+0x78>)
 80003ae:	6013      	str	r3, [r2, #0]
	led_buffer[1] = counter1%10;
 80003b0:	4b15      	ldr	r3, [pc, #84]	; (8000408 <update_buffer+0x70>)
 80003b2:	6819      	ldr	r1, [r3, #0]
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <update_buffer+0x74>)
 80003b6:	fb83 2301 	smull	r2, r3, r3, r1
 80003ba:	109a      	asrs	r2, r3, #2
 80003bc:	17cb      	asrs	r3, r1, #31
 80003be:	1ad2      	subs	r2, r2, r3
 80003c0:	4613      	mov	r3, r2
 80003c2:	009b      	lsls	r3, r3, #2
 80003c4:	4413      	add	r3, r2
 80003c6:	005b      	lsls	r3, r3, #1
 80003c8:	1aca      	subs	r2, r1, r3
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <update_buffer+0x78>)
 80003cc:	605a      	str	r2, [r3, #4]
	led_buffer[2] = counter2/10;
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <update_buffer+0x7c>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <update_buffer+0x74>)
 80003d4:	fb82 1203 	smull	r1, r2, r2, r3
 80003d8:	1092      	asrs	r2, r2, #2
 80003da:	17db      	asrs	r3, r3, #31
 80003dc:	1ad3      	subs	r3, r2, r3
 80003de:	4a0c      	ldr	r2, [pc, #48]	; (8000410 <update_buffer+0x78>)
 80003e0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = counter2%10;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <update_buffer+0x7c>)
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <update_buffer+0x74>)
 80003e8:	fb83 2301 	smull	r2, r3, r3, r1
 80003ec:	109a      	asrs	r2, r3, #2
 80003ee:	17cb      	asrs	r3, r1, #31
 80003f0:	1ad2      	subs	r2, r2, r3
 80003f2:	4613      	mov	r3, r2
 80003f4:	009b      	lsls	r3, r3, #2
 80003f6:	4413      	add	r3, r2
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	1aca      	subs	r2, r1, r3
 80003fc:	4b04      	ldr	r3, [pc, #16]	; (8000410 <update_buffer+0x78>)
 80003fe:	60da      	str	r2, [r3, #12]
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	20000080 	.word	0x20000080
 800040c:	66666667 	.word	0x66666667
 8000410:	20000088 	.word	0x20000088
 8000414:	20000084 	.word	0x20000084

08000418 <display>:

void display(int value){
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	2b09      	cmp	r3, #9
 8000424:	f200 8180 	bhi.w	8000728 <display+0x310>
 8000428:	a201      	add	r2, pc, #4	; (adr r2, 8000430 <display+0x18>)
 800042a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042e:	bf00      	nop
 8000430:	080006e1 	.word	0x080006e1
 8000434:	08000459 	.word	0x08000459
 8000438:	080004a1 	.word	0x080004a1
 800043c:	080004e9 	.word	0x080004e9
 8000440:	08000531 	.word	0x08000531
 8000444:	08000579 	.word	0x08000579
 8000448:	080005c1 	.word	0x080005c1
 800044c:	08000609 	.word	0x08000609
 8000450:	08000651 	.word	0x08000651
 8000454:	08000699 	.word	0x08000699
	switch (value) {
		case 1:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2101      	movs	r1, #1
 800045c:	48b5      	ldr	r0, [pc, #724]	; (8000734 <display+0x31c>)
 800045e:	f001 fbc6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2102      	movs	r1, #2
 8000466:	48b3      	ldr	r0, [pc, #716]	; (8000734 <display+0x31c>)
 8000468:	f001 fbc1 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2104      	movs	r1, #4
 8000470:	48b0      	ldr	r0, [pc, #704]	; (8000734 <display+0x31c>)
 8000472:	f001 fbbc 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, SET);
 8000476:	2201      	movs	r2, #1
 8000478:	2108      	movs	r1, #8
 800047a:	48ae      	ldr	r0, [pc, #696]	; (8000734 <display+0x31c>)
 800047c:	f001 fbb7 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2110      	movs	r1, #16
 8000484:	48ab      	ldr	r0, [pc, #684]	; (8000734 <display+0x31c>)
 8000486:	f001 fbb2 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2120      	movs	r1, #32
 800048e:	48a9      	ldr	r0, [pc, #676]	; (8000734 <display+0x31c>)
 8000490:	f001 fbad 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	48a6      	ldr	r0, [pc, #664]	; (8000734 <display+0x31c>)
 800049a:	f001 fba8 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 800049e:	e144      	b.n	800072a <display+0x312>
		case 2:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2101      	movs	r1, #1
 80004a4:	48a3      	ldr	r0, [pc, #652]	; (8000734 <display+0x31c>)
 80004a6:	f001 fba2 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2102      	movs	r1, #2
 80004ae:	48a1      	ldr	r0, [pc, #644]	; (8000734 <display+0x31c>)
 80004b0:	f001 fb9d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2104      	movs	r1, #4
 80004b8:	489e      	ldr	r0, [pc, #632]	; (8000734 <display+0x31c>)
 80004ba:	f001 fb98 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2108      	movs	r1, #8
 80004c2:	489c      	ldr	r0, [pc, #624]	; (8000734 <display+0x31c>)
 80004c4:	f001 fb93 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2110      	movs	r1, #16
 80004cc:	4899      	ldr	r0, [pc, #612]	; (8000734 <display+0x31c>)
 80004ce:	f001 fb8e 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2120      	movs	r1, #32
 80004d6:	4897      	ldr	r0, [pc, #604]	; (8000734 <display+0x31c>)
 80004d8:	f001 fb89 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	2140      	movs	r1, #64	; 0x40
 80004e0:	4894      	ldr	r0, [pc, #592]	; (8000734 <display+0x31c>)
 80004e2:	f001 fb84 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80004e6:	e120      	b.n	800072a <display+0x312>
		case 3:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2101      	movs	r1, #1
 80004ec:	4891      	ldr	r0, [pc, #580]	; (8000734 <display+0x31c>)
 80004ee:	f001 fb7e 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2102      	movs	r1, #2
 80004f6:	488f      	ldr	r0, [pc, #572]	; (8000734 <display+0x31c>)
 80004f8:	f001 fb79 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2104      	movs	r1, #4
 8000500:	488c      	ldr	r0, [pc, #560]	; (8000734 <display+0x31c>)
 8000502:	f001 fb74 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2108      	movs	r1, #8
 800050a:	488a      	ldr	r0, [pc, #552]	; (8000734 <display+0x31c>)
 800050c:	f001 fb6f 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2110      	movs	r1, #16
 8000514:	4887      	ldr	r0, [pc, #540]	; (8000734 <display+0x31c>)
 8000516:	f001 fb6a 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	4885      	ldr	r0, [pc, #532]	; (8000734 <display+0x31c>)
 8000520:	f001 fb65 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	4882      	ldr	r0, [pc, #520]	; (8000734 <display+0x31c>)
 800052a:	f001 fb60 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 800052e:	e0fc      	b.n	800072a <display+0x312>
		case 4:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2101      	movs	r1, #1
 8000534:	487f      	ldr	r0, [pc, #508]	; (8000734 <display+0x31c>)
 8000536:	f001 fb5a 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2102      	movs	r1, #2
 800053e:	487d      	ldr	r0, [pc, #500]	; (8000734 <display+0x31c>)
 8000540:	f001 fb55 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2104      	movs	r1, #4
 8000548:	487a      	ldr	r0, [pc, #488]	; (8000734 <display+0x31c>)
 800054a:	f001 fb50 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2108      	movs	r1, #8
 8000552:	4878      	ldr	r0, [pc, #480]	; (8000734 <display+0x31c>)
 8000554:	f001 fb4b 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2110      	movs	r1, #16
 800055c:	4875      	ldr	r0, [pc, #468]	; (8000734 <display+0x31c>)
 800055e:	f001 fb46 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	4873      	ldr	r0, [pc, #460]	; (8000734 <display+0x31c>)
 8000568:	f001 fb41 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2140      	movs	r1, #64	; 0x40
 8000570:	4870      	ldr	r0, [pc, #448]	; (8000734 <display+0x31c>)
 8000572:	f001 fb3c 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8000576:	e0d8      	b.n	800072a <display+0x312>
		case 5:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	486d      	ldr	r0, [pc, #436]	; (8000734 <display+0x31c>)
 800057e:	f001 fb36 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2102      	movs	r1, #2
 8000586:	486b      	ldr	r0, [pc, #428]	; (8000734 <display+0x31c>)
 8000588:	f001 fb31 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2104      	movs	r1, #4
 8000590:	4868      	ldr	r0, [pc, #416]	; (8000734 <display+0x31c>)
 8000592:	f001 fb2c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2108      	movs	r1, #8
 800059a:	4866      	ldr	r0, [pc, #408]	; (8000734 <display+0x31c>)
 800059c:	f001 fb27 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4863      	ldr	r0, [pc, #396]	; (8000734 <display+0x31c>)
 80005a6:	f001 fb22 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2120      	movs	r1, #32
 80005ae:	4861      	ldr	r0, [pc, #388]	; (8000734 <display+0x31c>)
 80005b0:	f001 fb1d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2140      	movs	r1, #64	; 0x40
 80005b8:	485e      	ldr	r0, [pc, #376]	; (8000734 <display+0x31c>)
 80005ba:	f001 fb18 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80005be:	e0b4      	b.n	800072a <display+0x312>
		case 6:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2101      	movs	r1, #1
 80005c4:	485b      	ldr	r0, [pc, #364]	; (8000734 <display+0x31c>)
 80005c6:	f001 fb12 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2102      	movs	r1, #2
 80005ce:	4859      	ldr	r0, [pc, #356]	; (8000734 <display+0x31c>)
 80005d0:	f001 fb0d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2104      	movs	r1, #4
 80005d8:	4856      	ldr	r0, [pc, #344]	; (8000734 <display+0x31c>)
 80005da:	f001 fb08 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 80005de:	2200      	movs	r2, #0
 80005e0:	2108      	movs	r1, #8
 80005e2:	4854      	ldr	r0, [pc, #336]	; (8000734 <display+0x31c>)
 80005e4:	f001 fb03 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2110      	movs	r1, #16
 80005ec:	4851      	ldr	r0, [pc, #324]	; (8000734 <display+0x31c>)
 80005ee:	f001 fafe 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	484f      	ldr	r0, [pc, #316]	; (8000734 <display+0x31c>)
 80005f8:	f001 faf9 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2140      	movs	r1, #64	; 0x40
 8000600:	484c      	ldr	r0, [pc, #304]	; (8000734 <display+0x31c>)
 8000602:	f001 faf4 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8000606:	e090      	b.n	800072a <display+0x312>
		case 7:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2101      	movs	r1, #1
 800060c:	4849      	ldr	r0, [pc, #292]	; (8000734 <display+0x31c>)
 800060e:	f001 faee 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2102      	movs	r1, #2
 8000616:	4847      	ldr	r0, [pc, #284]	; (8000734 <display+0x31c>)
 8000618:	f001 fae9 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2104      	movs	r1, #4
 8000620:	4844      	ldr	r0, [pc, #272]	; (8000734 <display+0x31c>)
 8000622:	f001 fae4 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, SET);
 8000626:	2201      	movs	r2, #1
 8000628:	2108      	movs	r1, #8
 800062a:	4842      	ldr	r0, [pc, #264]	; (8000734 <display+0x31c>)
 800062c:	f001 fadf 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	483f      	ldr	r0, [pc, #252]	; (8000734 <display+0x31c>)
 8000636:	f001 fada 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, SET);
 800063a:	2201      	movs	r2, #1
 800063c:	2120      	movs	r1, #32
 800063e:	483d      	ldr	r0, [pc, #244]	; (8000734 <display+0x31c>)
 8000640:	f001 fad5 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2140      	movs	r1, #64	; 0x40
 8000648:	483a      	ldr	r0, [pc, #232]	; (8000734 <display+0x31c>)
 800064a:	f001 fad0 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 800064e:	e06c      	b.n	800072a <display+0x312>
		case 8:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	4837      	ldr	r0, [pc, #220]	; (8000734 <display+0x31c>)
 8000656:	f001 faca 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	2102      	movs	r1, #2
 800065e:	4835      	ldr	r0, [pc, #212]	; (8000734 <display+0x31c>)
 8000660:	f001 fac5 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 8000664:	2200      	movs	r2, #0
 8000666:	2104      	movs	r1, #4
 8000668:	4832      	ldr	r0, [pc, #200]	; (8000734 <display+0x31c>)
 800066a:	f001 fac0 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2108      	movs	r1, #8
 8000672:	4830      	ldr	r0, [pc, #192]	; (8000734 <display+0x31c>)
 8000674:	f001 fabb 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	482d      	ldr	r0, [pc, #180]	; (8000734 <display+0x31c>)
 800067e:	f001 fab6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	2120      	movs	r1, #32
 8000686:	482b      	ldr	r0, [pc, #172]	; (8000734 <display+0x31c>)
 8000688:	f001 fab1 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2140      	movs	r1, #64	; 0x40
 8000690:	4828      	ldr	r0, [pc, #160]	; (8000734 <display+0x31c>)
 8000692:	f001 faac 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8000696:	e048      	b.n	800072a <display+0x312>
		case 9:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <display+0x31c>)
 800069e:	f001 faa6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2102      	movs	r1, #2
 80006a6:	4823      	ldr	r0, [pc, #140]	; (8000734 <display+0x31c>)
 80006a8:	f001 faa1 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2104      	movs	r1, #4
 80006b0:	4820      	ldr	r0, [pc, #128]	; (8000734 <display+0x31c>)
 80006b2:	f001 fa9c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2108      	movs	r1, #8
 80006ba:	481e      	ldr	r0, [pc, #120]	; (8000734 <display+0x31c>)
 80006bc:	f001 fa97 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2110      	movs	r1, #16
 80006c4:	481b      	ldr	r0, [pc, #108]	; (8000734 <display+0x31c>)
 80006c6:	f001 fa92 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	4819      	ldr	r0, [pc, #100]	; (8000734 <display+0x31c>)
 80006d0:	f001 fa8d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4816      	ldr	r0, [pc, #88]	; (8000734 <display+0x31c>)
 80006da:	f001 fa88 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80006de:	e024      	b.n	800072a <display+0x312>
		case 0:
			HAL_GPIO_WritePin(Led_A_GPIO_Port, Led_A_Pin, RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2101      	movs	r1, #1
 80006e4:	4813      	ldr	r0, [pc, #76]	; (8000734 <display+0x31c>)
 80006e6:	f001 fa82 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_B_GPIO_Port, Led_B_Pin, RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	4811      	ldr	r0, [pc, #68]	; (8000734 <display+0x31c>)
 80006f0:	f001 fa7d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_C_GPIO_Port, Led_C_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2104      	movs	r1, #4
 80006f8:	480e      	ldr	r0, [pc, #56]	; (8000734 <display+0x31c>)
 80006fa:	f001 fa78 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_D_GPIO_Port, Led_D_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2108      	movs	r1, #8
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <display+0x31c>)
 8000704:	f001 fa73 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_E_GPIO_Port, Led_E_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2110      	movs	r1, #16
 800070c:	4809      	ldr	r0, [pc, #36]	; (8000734 <display+0x31c>)
 800070e:	f001 fa6e 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_F_GPIO_Port, Led_F_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <display+0x31c>)
 8000718:	f001 fa69 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_G_GPIO_Port, Led_G_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <display+0x31c>)
 8000722:	f001 fa64 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8000726:	e000      	b.n	800072a <display+0x312>
		default:
			break;
 8000728:	bf00      	nop
	}
	return;
 800072a:	bf00      	nop
}
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40010c00 	.word	0x40010c00

08000738 <scanled>:

void scanled(int idx){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b03      	cmp	r3, #3
 8000744:	d872      	bhi.n	800082c <scanled+0xf4>
 8000746:	a201      	add	r2, pc, #4	; (adr r2, 800074c <scanled+0x14>)
 8000748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074c:	0800075d 	.word	0x0800075d
 8000750:	08000791 	.word	0x08000791
 8000754:	080007c5 	.word	0x080007c5
 8000758:	080007f9 	.word	0x080007f9
	switch (idx) {
		case 0:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2102      	movs	r1, #2
 8000760:	4835      	ldr	r0, [pc, #212]	; (8000838 <scanled+0x100>)
 8000762:	f001 fa44 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2104      	movs	r1, #4
 800076a:	4833      	ldr	r0, [pc, #204]	; (8000838 <scanled+0x100>)
 800076c:	f001 fa3f 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2108      	movs	r1, #8
 8000774:	4830      	ldr	r0, [pc, #192]	; (8000838 <scanled+0x100>)
 8000776:	f001 fa3a 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	482e      	ldr	r0, [pc, #184]	; (8000838 <scanled+0x100>)
 8000780:	f001 fa35 	bl	8001bee <HAL_GPIO_WritePin>
			display(led_buffer[0]);
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <scanled+0x104>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fe45 	bl	8000418 <display>
			break;
 800078e:	e04e      	b.n	800082e <scanled+0xf6>
		case 1:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	2102      	movs	r1, #2
 8000794:	4828      	ldr	r0, [pc, #160]	; (8000838 <scanled+0x100>)
 8000796:	f001 fa2a 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2104      	movs	r1, #4
 800079e:	4826      	ldr	r0, [pc, #152]	; (8000838 <scanled+0x100>)
 80007a0:	f001 fa25 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4823      	ldr	r0, [pc, #140]	; (8000838 <scanled+0x100>)
 80007aa:	f001 fa20 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2110      	movs	r1, #16
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <scanled+0x100>)
 80007b4:	f001 fa1b 	bl	8001bee <HAL_GPIO_WritePin>
			display(led_buffer[1]);
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <scanled+0x104>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe2b 	bl	8000418 <display>
			break;
 80007c2:	e034      	b.n	800082e <scanled+0xf6>
		case 2:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2102      	movs	r1, #2
 80007c8:	481b      	ldr	r0, [pc, #108]	; (8000838 <scanled+0x100>)
 80007ca:	f001 fa10 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2104      	movs	r1, #4
 80007d2:	4819      	ldr	r0, [pc, #100]	; (8000838 <scanled+0x100>)
 80007d4:	f001 fa0b 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2108      	movs	r1, #8
 80007dc:	4816      	ldr	r0, [pc, #88]	; (8000838 <scanled+0x100>)
 80007de:	f001 fa06 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4814      	ldr	r0, [pc, #80]	; (8000838 <scanled+0x100>)
 80007e8:	f001 fa01 	bl	8001bee <HAL_GPIO_WritePin>
			display(led_buffer[2]);
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <scanled+0x104>)
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fe11 	bl	8000418 <display>
			break;
 80007f6:	e01a      	b.n	800082e <scanled+0xf6>
		case 3:
			HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2102      	movs	r1, #2
 80007fc:	480e      	ldr	r0, [pc, #56]	; (8000838 <scanled+0x100>)
 80007fe:	f001 f9f6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000802:	2201      	movs	r2, #1
 8000804:	2104      	movs	r1, #4
 8000806:	480c      	ldr	r0, [pc, #48]	; (8000838 <scanled+0x100>)
 8000808:	f001 f9f1 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 800080c:	2201      	movs	r2, #1
 800080e:	2108      	movs	r1, #8
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <scanled+0x100>)
 8000812:	f001 f9ec 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2110      	movs	r1, #16
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <scanled+0x100>)
 800081c:	f001 f9e7 	bl	8001bee <HAL_GPIO_WritePin>
			display(led_buffer[3]);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <scanled+0x104>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fdf7 	bl	8000418 <display>
			break;
 800082a:	e000      	b.n	800082e <scanled+0xf6>
		default:
			break;
 800082c:	bf00      	nop
	}
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40010800 	.word	0x40010800
 800083c:	20000088 	.word	0x20000088

08000840 <fsm_automatic1_run>:
 */

#include "fsm_automatic.h"


void fsm_automatic1_run(){
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	switch (status1) {
 8000844:	4b78      	ldr	r3, [pc, #480]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3b01      	subs	r3, #1
 800084a:	2b03      	cmp	r3, #3
 800084c:	f200 80e3 	bhi.w	8000a16 <fsm_automatic1_run+0x1d6>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <fsm_automatic1_run+0x18>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000869 	.word	0x08000869
 800085c:	080008b9 	.word	0x080008b9
 8000860:	0800092d 	.word	0x0800092d
 8000864:	080009a3 	.word	0x080009a3
		case INIT:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000868:	2201      	movs	r2, #1
 800086a:	2120      	movs	r1, #32
 800086c:	486f      	ldr	r0, [pc, #444]	; (8000a2c <fsm_automatic1_run+0x1ec>)
 800086e:	f001 f9be 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	486d      	ldr	r0, [pc, #436]	; (8000a2c <fsm_automatic1_run+0x1ec>)
 8000878:	f001 f9b9 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2180      	movs	r1, #128	; 0x80
 8000880:	486a      	ldr	r0, [pc, #424]	; (8000a2c <fsm_automatic1_run+0x1ec>)
 8000882:	f001 f9b4 	bl	8001bee <HAL_GPIO_WritePin>
			status1 = AUTO_RED;		// ready for AUTO RED light
 8000886:	4b68      	ldr	r3, [pc, #416]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 8000888:	2202      	movs	r2, #2
 800088a:	601a      	str	r2, [r3, #0]
			setTimer1(red_time);	// ready for AUTO RED light
 800088c:	4b68      	ldr	r3, [pc, #416]	; (8000a30 <fsm_automatic1_run+0x1f0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fc73 	bl	800117c <setTimer1>
			counter1 = red_time/100 - 1;// set counter ready for AUTO RED count down
 8000896:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <fsm_automatic1_run+0x1f0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a66      	ldr	r2, [pc, #408]	; (8000a34 <fsm_automatic1_run+0x1f4>)
 800089c:	fb82 1203 	smull	r1, r2, r2, r3
 80008a0:	1152      	asrs	r2, r2, #5
 80008a2:	17db      	asrs	r3, r3, #31
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	3b01      	subs	r3, #1
 80008a8:	4a63      	ldr	r2, [pc, #396]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80008aa:	6013      	str	r3, [r2, #0]
			setTimer3(duration);	// set timer ready for AUTO RED count down
 80008ac:	4b63      	ldr	r3, [pc, #396]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fcbf 	bl	8001234 <setTimer3>
			break;
 80008b6:	e0b5      	b.n	8000a24 <fsm_automatic1_run+0x1e4>
		case AUTO_RED:
			light1(RED); //red 1 on
 80008b8:	2064      	movs	r0, #100	; 0x64
 80008ba:	f000 fdd3 	bl	8001464 <light1>

			if (timer3_flag == 1){
 80008be:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <fsm_automatic1_run+0x200>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d109      	bne.n	80008da <fsm_automatic1_run+0x9a>
				counter1--;
 80008c6:	4b5c      	ldr	r3, [pc, #368]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	4a5a      	ldr	r2, [pc, #360]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80008ce:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 80008d0:	4b5a      	ldr	r3, [pc, #360]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fcad 	bl	8001234 <setTimer3>
			}
			// ready for next state
			if (timer1_flag == 1) {
 80008da:	4b5a      	ldr	r3, [pc, #360]	; (8000a44 <fsm_automatic1_run+0x204>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d117      	bne.n	8000912 <fsm_automatic1_run+0xd2>
				status1 = AUTO_GREEN;
 80008e2:	4b51      	ldr	r3, [pc, #324]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 80008e4:	2203      	movs	r2, #3
 80008e6:	601a      	str	r2, [r3, #0]
				setTimer1(green_time);
 80008e8:	4b57      	ldr	r3, [pc, #348]	; (8000a48 <fsm_automatic1_run+0x208>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fc45 	bl	800117c <setTimer1>
				counter1 = green_time/100 - 1;
 80008f2:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <fsm_automatic1_run+0x208>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a4f      	ldr	r2, [pc, #316]	; (8000a34 <fsm_automatic1_run+0x1f4>)
 80008f8:	fb82 1203 	smull	r1, r2, r2, r3
 80008fc:	1152      	asrs	r2, r2, #5
 80008fe:	17db      	asrs	r3, r3, #31
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	3b01      	subs	r3, #1
 8000904:	4a4c      	ldr	r2, [pc, #304]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 8000906:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f000 fc91 	bl	8001234 <setTimer3>
			}
			//
			if (isButton1Pressed() == 1){
 8000912:	f7ff fc1b 	bl	800014c <isButton1Pressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	d17e      	bne.n	8000a1a <fsm_automatic1_run+0x1da>
				status1 = MAN_RED;
 800091c:	4b42      	ldr	r3, [pc, #264]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000922:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000926:	f000 fc29 	bl	800117c <setTimer1>
			}
			break;
 800092a:	e076      	b.n	8000a1a <fsm_automatic1_run+0x1da>
		case AUTO_GREEN:
			light1(GREEN); // green 1 on
 800092c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000930:	f000 fd98 	bl	8001464 <light1>

			if (timer3_flag == 1){
 8000934:	4b42      	ldr	r3, [pc, #264]	; (8000a40 <fsm_automatic1_run+0x200>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d109      	bne.n	8000950 <fsm_automatic1_run+0x110>
				counter1--;
 800093c:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	3b01      	subs	r3, #1
 8000942:	4a3d      	ldr	r2, [pc, #244]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 8000944:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 8000946:	4b3d      	ldr	r3, [pc, #244]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fc72 	bl	8001234 <setTimer3>
			}
			// ready for next state
			if (timer1_flag == 1){
 8000950:	4b3c      	ldr	r3, [pc, #240]	; (8000a44 <fsm_automatic1_run+0x204>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d117      	bne.n	8000988 <fsm_automatic1_run+0x148>
				status1 = AUTO_YELLOW;
 8000958:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 800095a:	2204      	movs	r2, #4
 800095c:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time);
 800095e:	4b3b      	ldr	r3, [pc, #236]	; (8000a4c <fsm_automatic1_run+0x20c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fc0a 	bl	800117c <setTimer1>
				counter1 = yellow_time/100 - 1;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <fsm_automatic1_run+0x20c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a31      	ldr	r2, [pc, #196]	; (8000a34 <fsm_automatic1_run+0x1f4>)
 800096e:	fb82 1203 	smull	r1, r2, r2, r3
 8000972:	1152      	asrs	r2, r2, #5
 8000974:	17db      	asrs	r3, r3, #31
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	3b01      	subs	r3, #1
 800097a:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 800097c:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fc56 	bl	8001234 <setTimer3>
			}
			//
			if (isButton1Pressed() == 1){
 8000988:	f7ff fbe0 	bl	800014c <isButton1Pressed>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d145      	bne.n	8000a1e <fsm_automatic1_run+0x1de>
				status1 = MAN_RED;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 8000994:	220c      	movs	r2, #12
 8000996:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000998:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800099c:	f000 fbee 	bl	800117c <setTimer1>
			}
			break;
 80009a0:	e03d      	b.n	8000a1e <fsm_automatic1_run+0x1de>
		case AUTO_YELLOW:
			light1(YELLOW); // yellow 1 on
 80009a2:	20c8      	movs	r0, #200	; 0xc8
 80009a4:	f000 fd5e 	bl	8001464 <light1>

			if (timer3_flag == 1){
 80009a8:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <fsm_automatic1_run+0x200>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d109      	bne.n	80009c4 <fsm_automatic1_run+0x184>
				counter1--;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80009b8:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fc38 	bl	8001234 <setTimer3>
			}
			// ready for next state
			if (timer1_flag == 1){
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <fsm_automatic1_run+0x204>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d117      	bne.n	80009fc <fsm_automatic1_run+0x1bc>
				status1 = AUTO_RED;
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	601a      	str	r2, [r3, #0]
				setTimer1(red_time);
 80009d2:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <fsm_automatic1_run+0x1f0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fbd0 	bl	800117c <setTimer1>
				counter1 = red_time/100 - 1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <fsm_automatic1_run+0x1f0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a14      	ldr	r2, [pc, #80]	; (8000a34 <fsm_automatic1_run+0x1f4>)
 80009e2:	fb82 1203 	smull	r1, r2, r2, r3
 80009e6:	1152      	asrs	r2, r2, #5
 80009e8:	17db      	asrs	r3, r3, #31
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <fsm_automatic1_run+0x1f8>)
 80009f0:	6013      	str	r3, [r2, #0]
				setTimer3(duration);
 80009f2:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <fsm_automatic1_run+0x1fc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 fc1c 	bl	8001234 <setTimer3>
			}
			//
			if (isButton1Pressed() == 1){
 80009fc:	f7ff fba6 	bl	800014c <isButton1Pressed>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d10d      	bne.n	8000a22 <fsm_automatic1_run+0x1e2>
				status1 = MAN_RED;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <fsm_automatic1_run+0x1e8>)
 8000a08:	220c      	movs	r2, #12
 8000a0a:	601a      	str	r2, [r3, #0]
				setTimer1(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f000 fbb4 	bl	800117c <setTimer1>
			}
			break;
 8000a14:	e005      	b.n	8000a22 <fsm_automatic1_run+0x1e2>
		default:
			break;
 8000a16:	bf00      	nop
 8000a18:	e004      	b.n	8000a24 <fsm_automatic1_run+0x1e4>
			break;
 8000a1a:	bf00      	nop
 8000a1c:	e002      	b.n	8000a24 <fsm_automatic1_run+0x1e4>
			break;
 8000a1e:	bf00      	nop
 8000a20:	e000      	b.n	8000a24 <fsm_automatic1_run+0x1e4>
			break;
 8000a22:	bf00      	nop
	}
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000078 	.word	0x20000078
 8000a2c:	40010800 	.word	0x40010800
 8000a30:	20000034 	.word	0x20000034
 8000a34:	51eb851f 	.word	0x51eb851f
 8000a38:	20000080 	.word	0x20000080
 8000a3c:	20000040 	.word	0x20000040
 8000a40:	200000ac 	.word	0x200000ac
 8000a44:	2000009c 	.word	0x2000009c
 8000a48:	20000038 	.word	0x20000038
 8000a4c:	2000003c 	.word	0x2000003c

08000a50 <fsm_automatic2_run>:

void fsm_automatic2_run(){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	switch (status2) {
 8000a54:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <fsm_automatic2_run+0x1a8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	f200 80c2 	bhi.w	8000be4 <fsm_automatic2_run+0x194>
 8000a60:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <fsm_automatic2_run+0x18>)
 8000a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a66:	bf00      	nop
 8000a68:	08000a79 	.word	0x08000a79
 8000a6c:	08000acf 	.word	0x08000acf
 8000a70:	08000b2b 	.word	0x08000b2b
 8000a74:	08000b89 	.word	0x08000b89
		case INIT:
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7e:	485f      	ldr	r0, [pc, #380]	; (8000bfc <fsm_automatic2_run+0x1ac>)
 8000a80:	f001 f8b5 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8a:	485c      	ldr	r0, [pc, #368]	; (8000bfc <fsm_automatic2_run+0x1ac>)
 8000a8c:	f001 f8af 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a96:	4859      	ldr	r0, [pc, #356]	; (8000bfc <fsm_automatic2_run+0x1ac>)
 8000a98:	f001 f8a9 	bl	8001bee <HAL_GPIO_WritePin>
			status2 = AUTO_GREEN;
 8000a9c:	4b56      	ldr	r3, [pc, #344]	; (8000bf8 <fsm_automatic2_run+0x1a8>)
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	601a      	str	r2, [r3, #0]
			setTimer2(green_time);
 8000aa2:	4b57      	ldr	r3, [pc, #348]	; (8000c00 <fsm_automatic2_run+0x1b0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 fb96 	bl	80011d8 <setTimer2>
			counter2 = green_time/100 - 1;
 8000aac:	4b54      	ldr	r3, [pc, #336]	; (8000c00 <fsm_automatic2_run+0x1b0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <fsm_automatic2_run+0x1b4>)
 8000ab2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab6:	1152      	asrs	r2, r2, #5
 8000ab8:	17db      	asrs	r3, r3, #31
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	3b01      	subs	r3, #1
 8000abe:	4a52      	ldr	r2, [pc, #328]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000ac0:	6013      	str	r3, [r2, #0]
			setTimer5(duration);
 8000ac2:	4b52      	ldr	r3, [pc, #328]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fc10 	bl	80012ec <setTimer5>
			break;
 8000acc:	e091      	b.n	8000bf2 <fsm_automatic2_run+0x1a2>
		case AUTO_RED:
			light2(RED); //red 2 on
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f000 fd12 	bl	80014f8 <light2>

			if (timer5_flag == 1){
 8000ad4:	4b4e      	ldr	r3, [pc, #312]	; (8000c10 <fsm_automatic2_run+0x1c0>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d109      	bne.n	8000af0 <fsm_automatic2_run+0xa0>
				counter2--;
 8000adc:	4b4a      	ldr	r3, [pc, #296]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	4a49      	ldr	r2, [pc, #292]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000ae4:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000ae6:	4b49      	ldr	r3, [pc, #292]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fbfe 	bl	80012ec <setTimer5>
			}
			// ready for next state
			if (timer2_flag == 1) {
 8000af0:	4b48      	ldr	r3, [pc, #288]	; (8000c14 <fsm_automatic2_run+0x1c4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d177      	bne.n	8000be8 <fsm_automatic2_run+0x198>
				status2 = AUTO_GREEN;
 8000af8:	4b3f      	ldr	r3, [pc, #252]	; (8000bf8 <fsm_automatic2_run+0x1a8>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	601a      	str	r2, [r3, #0]
				setTimer2(green_time);
 8000afe:	4b40      	ldr	r3, [pc, #256]	; (8000c00 <fsm_automatic2_run+0x1b0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fb68 	bl	80011d8 <setTimer2>
				counter2 = green_time/100 - 1;
 8000b08:	4b3d      	ldr	r3, [pc, #244]	; (8000c00 <fsm_automatic2_run+0x1b0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <fsm_automatic2_run+0x1b4>)
 8000b0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b12:	1152      	asrs	r2, r2, #5
 8000b14:	17db      	asrs	r3, r3, #31
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	4a3b      	ldr	r2, [pc, #236]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b1c:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 fbe2 	bl	80012ec <setTimer5>
			}
			break;
 8000b28:	e05e      	b.n	8000be8 <fsm_automatic2_run+0x198>
		case AUTO_GREEN:
			light2(GREEN); // green 2 on
 8000b2a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b2e:	f000 fce3 	bl	80014f8 <light2>

			if (timer5_flag == 1){
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <fsm_automatic2_run+0x1c0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d109      	bne.n	8000b4e <fsm_automatic2_run+0xfe>
				counter2--;
 8000b3a:	4b33      	ldr	r3, [pc, #204]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b42:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 fbcf 	bl	80012ec <setTimer5>
			}
			// ready for next state
			if (timer2_flag == 1){
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <fsm_automatic2_run+0x1c4>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d14a      	bne.n	8000bec <fsm_automatic2_run+0x19c>
				status2 = AUTO_YELLOW;
 8000b56:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <fsm_automatic2_run+0x1a8>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	601a      	str	r2, [r3, #0]
				setTimer2(yellow_time);
 8000b5c:	4b2e      	ldr	r3, [pc, #184]	; (8000c18 <fsm_automatic2_run+0x1c8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fb39 	bl	80011d8 <setTimer2>
				counter2 = yellow_time/100 - 1;
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <fsm_automatic2_run+0x1c8>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a26      	ldr	r2, [pc, #152]	; (8000c04 <fsm_automatic2_run+0x1b4>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1152      	asrs	r2, r2, #5
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	3b01      	subs	r3, #1
 8000b78:	4a23      	ldr	r2, [pc, #140]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b7a:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fbb3 	bl	80012ec <setTimer5>
			}
			break;
 8000b86:	e031      	b.n	8000bec <fsm_automatic2_run+0x19c>
		case AUTO_YELLOW:
			light2(YELLOW); // yellow 1 on
 8000b88:	20c8      	movs	r0, #200	; 0xc8
 8000b8a:	f000 fcb5 	bl	80014f8 <light2>

			if (timer5_flag == 1){
 8000b8e:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <fsm_automatic2_run+0x1c0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d109      	bne.n	8000baa <fsm_automatic2_run+0x15a>
				counter2--;
 8000b96:	4b1c      	ldr	r3, [pc, #112]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	4a1a      	ldr	r2, [pc, #104]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000b9e:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f000 fba1 	bl	80012ec <setTimer5>
			}
			// ready for next state
			if (timer2_flag == 1){
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <fsm_automatic2_run+0x1c4>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d11e      	bne.n	8000bf0 <fsm_automatic2_run+0x1a0>
				status2 = AUTO_RED;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <fsm_automatic2_run+0x1a8>)
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]
				setTimer2(red_time);
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <fsm_automatic2_run+0x1cc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fb0b 	bl	80011d8 <setTimer2>
				counter2 = red_time/100 - 1;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <fsm_automatic2_run+0x1cc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <fsm_automatic2_run+0x1b4>)
 8000bc8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bcc:	1152      	asrs	r2, r2, #5
 8000bce:	17db      	asrs	r3, r3, #31
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <fsm_automatic2_run+0x1b8>)
 8000bd6:	6013      	str	r3, [r2, #0]
				setTimer5(duration);
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <fsm_automatic2_run+0x1bc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 fb85 	bl	80012ec <setTimer5>
			}
			break;
 8000be2:	e005      	b.n	8000bf0 <fsm_automatic2_run+0x1a0>
		default:
			break;
 8000be4:	bf00      	nop
 8000be6:	e004      	b.n	8000bf2 <fsm_automatic2_run+0x1a2>
			break;
 8000be8:	bf00      	nop
 8000bea:	e002      	b.n	8000bf2 <fsm_automatic2_run+0x1a2>
			break;
 8000bec:	bf00      	nop
 8000bee:	e000      	b.n	8000bf2 <fsm_automatic2_run+0x1a2>
			break;
 8000bf0:	bf00      	nop
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000007c 	.word	0x2000007c
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	20000038 	.word	0x20000038
 8000c04:	51eb851f 	.word	0x51eb851f
 8000c08:	20000084 	.word	0x20000084
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	200000bc 	.word	0x200000bc
 8000c14:	200000a4 	.word	0x200000a4
 8000c18:	2000003c 	.word	0x2000003c
 8000c1c:	20000034 	.word	0x20000034

08000c20 <fsm_manual_run>:
 *      Author: DELL F89F
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	switch (status1) {
 8000c24:	4b97      	ldr	r3, [pc, #604]	; (8000e84 <fsm_manual_run+0x264>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b0e      	cmp	r3, #14
 8000c2a:	f000 80c6 	beq.w	8000dba <fsm_manual_run+0x19a>
 8000c2e:	2b0e      	cmp	r3, #14
 8000c30:	f300 811f 	bgt.w	8000e72 <fsm_manual_run+0x252>
 8000c34:	2b0c      	cmp	r3, #12
 8000c36:	d002      	beq.n	8000c3e <fsm_manual_run+0x1e>
 8000c38:	2b0d      	cmp	r3, #13
 8000c3a:	d05f      	beq.n	8000cfc <fsm_manual_run+0xdc>
			if (isButton3Pressed() == 1){
				yellow_time = 100*(counter1+1);
			}
			break;
		default:
			break;
 8000c3c:	e119      	b.n	8000e72 <fsm_manual_run+0x252>
			light1(RED);
 8000c3e:	2064      	movs	r0, #100	; 0x64
 8000c40:	f000 fc10 	bl	8001464 <light1>
			status2 = 0;
 8000c44:	4b90      	ldr	r3, [pc, #576]	; (8000e88 <fsm_manual_run+0x268>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c50:	488e      	ldr	r0, [pc, #568]	; (8000e8c <fsm_manual_run+0x26c>)
 8000c52:	f000 ffcc 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 8000c56:	2201      	movs	r2, #1
 8000c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c5c:	488b      	ldr	r0, [pc, #556]	; (8000e8c <fsm_manual_run+0x26c>)
 8000c5e:	f000 ffc6 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c68:	4888      	ldr	r0, [pc, #544]	; (8000e8c <fsm_manual_run+0x26c>)
 8000c6a:	f000 ffc0 	bl	8001bee <HAL_GPIO_WritePin>
			counter1 = red_time/100 - 1;
 8000c6e:	4b88      	ldr	r3, [pc, #544]	; (8000e90 <fsm_manual_run+0x270>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a88      	ldr	r2, [pc, #544]	; (8000e94 <fsm_manual_run+0x274>)
 8000c74:	fb82 1203 	smull	r1, r2, r2, r3
 8000c78:	1152      	asrs	r2, r2, #5
 8000c7a:	17db      	asrs	r3, r3, #31
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	4a85      	ldr	r2, [pc, #532]	; (8000e98 <fsm_manual_run+0x278>)
 8000c82:	6013      	str	r3, [r2, #0]
			counter2 = 2; // to display mode 02
 8000c84:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <fsm_manual_run+0x27c>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	601a      	str	r2, [r3, #0]
			if (timer1_flag == 1){
 8000c8a:	4b85      	ldr	r3, [pc, #532]	; (8000ea0 <fsm_manual_run+0x280>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d10f      	bne.n	8000cb2 <fsm_manual_run+0x92>
				status1 = AUTO_RED;
 8000c92:	4b7c      	ldr	r3, [pc, #496]	; (8000e84 <fsm_manual_run+0x264>)
 8000c94:	2202      	movs	r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
				status2 = AUTO_GREEN;
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <fsm_manual_run+0x268>)
 8000c9a:	2203      	movs	r2, #3
 8000c9c:	601a      	str	r2, [r3, #0]
				setTimer1(red_time);
 8000c9e:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <fsm_manual_run+0x270>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fa6a 	bl	800117c <setTimer1>
				setTimer2(green_time);
 8000ca8:	4b7e      	ldr	r3, [pc, #504]	; (8000ea4 <fsm_manual_run+0x284>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 fa93 	bl	80011d8 <setTimer2>
			if (isButton1Pressed() == 1){
 8000cb2:	f7ff fa4b 	bl	800014c <isButton1Pressed>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <fsm_manual_run+0xaa>
				status1 = MAN_GREEN;
 8000cbc:	4b71      	ldr	r3, [pc, #452]	; (8000e84 <fsm_manual_run+0x264>)
 8000cbe:	220d      	movs	r2, #13
 8000cc0:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc6:	f000 fa59 	bl	800117c <setTimer1>
			if (isButton2Pressed() == 1){
 8000cca:	f7ff faa1 	bl	8000210 <isButton2Pressed>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d104      	bne.n	8000cde <fsm_manual_run+0xbe>
				counter1++;
 8000cd4:	4b70      	ldr	r3, [pc, #448]	; (8000e98 <fsm_manual_run+0x278>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a6f      	ldr	r2, [pc, #444]	; (8000e98 <fsm_manual_run+0x278>)
 8000cdc:	6013      	str	r3, [r2, #0]
			if (isButton3Pressed() == 1){
 8000cde:	f7ff faf9 	bl	80002d4 <isButton3Pressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	f040 80c6 	bne.w	8000e76 <fsm_manual_run+0x256>
				red_time = 100* (counter1+1);
 8000cea:	4b6b      	ldr	r3, [pc, #428]	; (8000e98 <fsm_manual_run+0x278>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	2264      	movs	r2, #100	; 0x64
 8000cf2:	fb02 f303 	mul.w	r3, r2, r3
 8000cf6:	4a66      	ldr	r2, [pc, #408]	; (8000e90 <fsm_manual_run+0x270>)
 8000cf8:	6013      	str	r3, [r2, #0]
			break;
 8000cfa:	e0bc      	b.n	8000e76 <fsm_manual_run+0x256>
			light1(GREEN);
 8000cfc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d00:	f000 fbb0 	bl	8001464 <light1>
			status2 = 0;
 8000d04:	4b60      	ldr	r3, [pc, #384]	; (8000e88 <fsm_manual_run+0x268>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d10:	485e      	ldr	r0, [pc, #376]	; (8000e8c <fsm_manual_run+0x26c>)
 8000d12:	f000 ff6c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1c:	485b      	ldr	r0, [pc, #364]	; (8000e8c <fsm_manual_run+0x26c>)
 8000d1e:	f000 ff66 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d28:	4858      	ldr	r0, [pc, #352]	; (8000e8c <fsm_manual_run+0x26c>)
 8000d2a:	f000 ff60 	bl	8001bee <HAL_GPIO_WritePin>
			counter1 = green_time/100 - 1;
 8000d2e:	4b5d      	ldr	r3, [pc, #372]	; (8000ea4 <fsm_manual_run+0x284>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <fsm_manual_run+0x274>)
 8000d34:	fb82 1203 	smull	r1, r2, r2, r3
 8000d38:	1152      	asrs	r2, r2, #5
 8000d3a:	17db      	asrs	r3, r3, #31
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	4a55      	ldr	r2, [pc, #340]	; (8000e98 <fsm_manual_run+0x278>)
 8000d42:	6013      	str	r3, [r2, #0]
			counter2 = 3; // to display mode 03
 8000d44:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <fsm_manual_run+0x27c>)
 8000d46:	2203      	movs	r2, #3
 8000d48:	601a      	str	r2, [r3, #0]
			if (timer1_flag == 1){
 8000d4a:	4b55      	ldr	r3, [pc, #340]	; (8000ea0 <fsm_manual_run+0x280>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d10f      	bne.n	8000d72 <fsm_manual_run+0x152>
				status1 = AUTO_GREEN;
 8000d52:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <fsm_manual_run+0x264>)
 8000d54:	2203      	movs	r2, #3
 8000d56:	601a      	str	r2, [r3, #0]
				setTimer1(green_time);
 8000d58:	4b52      	ldr	r3, [pc, #328]	; (8000ea4 <fsm_manual_run+0x284>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fa0d 	bl	800117c <setTimer1>
				status2 = AUTO_RED;
 8000d62:	4b49      	ldr	r3, [pc, #292]	; (8000e88 <fsm_manual_run+0x268>)
 8000d64:	2202      	movs	r2, #2
 8000d66:	601a      	str	r2, [r3, #0]
				setTimer2(red_time);
 8000d68:	4b49      	ldr	r3, [pc, #292]	; (8000e90 <fsm_manual_run+0x270>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fa33 	bl	80011d8 <setTimer2>
			if (isButton1Pressed() == 1){
 8000d72:	f7ff f9eb 	bl	800014c <isButton1Pressed>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d106      	bne.n	8000d8a <fsm_manual_run+0x16a>
				status1 = MAN_YELLOW;
 8000d7c:	4b41      	ldr	r3, [pc, #260]	; (8000e84 <fsm_manual_run+0x264>)
 8000d7e:	220e      	movs	r2, #14
 8000d80:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f000 f9f9 	bl	800117c <setTimer1>
			if (isButton2Pressed() == 1){
 8000d8a:	f7ff fa41 	bl	8000210 <isButton2Pressed>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d104      	bne.n	8000d9e <fsm_manual_run+0x17e>
				counter1++;
 8000d94:	4b40      	ldr	r3, [pc, #256]	; (8000e98 <fsm_manual_run+0x278>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a3f      	ldr	r2, [pc, #252]	; (8000e98 <fsm_manual_run+0x278>)
 8000d9c:	6013      	str	r3, [r2, #0]
			if (isButton3Pressed() == 1){
 8000d9e:	f7ff fa99 	bl	80002d4 <isButton3Pressed>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d168      	bne.n	8000e7a <fsm_manual_run+0x25a>
				green_time = 100*(counter1+1);
 8000da8:	4b3b      	ldr	r3, [pc, #236]	; (8000e98 <fsm_manual_run+0x278>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	3301      	adds	r3, #1
 8000dae:	2264      	movs	r2, #100	; 0x64
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	4a3b      	ldr	r2, [pc, #236]	; (8000ea4 <fsm_manual_run+0x284>)
 8000db6:	6013      	str	r3, [r2, #0]
			break;
 8000db8:	e05f      	b.n	8000e7a <fsm_manual_run+0x25a>
			light1(YELLOW);
 8000dba:	20c8      	movs	r0, #200	; 0xc8
 8000dbc:	f000 fb52 	bl	8001464 <light1>
			status2 = 0;
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <fsm_manual_run+0x268>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	482f      	ldr	r0, [pc, #188]	; (8000e8c <fsm_manual_run+0x26c>)
 8000dce:	f000 ff0e 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	482c      	ldr	r0, [pc, #176]	; (8000e8c <fsm_manual_run+0x26c>)
 8000dda:	f000 ff08 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	4829      	ldr	r0, [pc, #164]	; (8000e8c <fsm_manual_run+0x26c>)
 8000de6:	f000 ff02 	bl	8001bee <HAL_GPIO_WritePin>
			counter1 = yellow_time/100 - 1;
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <fsm_manual_run+0x288>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <fsm_manual_run+0x274>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	1152      	asrs	r2, r2, #5
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	4a26      	ldr	r2, [pc, #152]	; (8000e98 <fsm_manual_run+0x278>)
 8000dfe:	6013      	str	r3, [r2, #0]
			counter2 = 4; // to display mode 04
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <fsm_manual_run+0x27c>)
 8000e02:	2204      	movs	r2, #4
 8000e04:	601a      	str	r2, [r3, #0]
			if (timer1_flag == 1){
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <fsm_manual_run+0x280>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d10d      	bne.n	8000e2a <fsm_manual_run+0x20a>
				status1 = AUTO_YELLOW;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <fsm_manual_run+0x264>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	601a      	str	r2, [r3, #0]
				setTimer1(yellow_time);
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <fsm_manual_run+0x288>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f9af 	bl	800117c <setTimer1>
				status2 = AUTO_RED;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <fsm_manual_run+0x268>)
 8000e20:	2202      	movs	r2, #2
 8000e22:	601a      	str	r2, [r3, #0]
				setTimer2(200);
 8000e24:	20c8      	movs	r0, #200	; 0xc8
 8000e26:	f000 f9d7 	bl	80011d8 <setTimer2>
			if (isButton1Pressed() == 1){
 8000e2a:	f7ff f98f 	bl	800014c <isButton1Pressed>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <fsm_manual_run+0x222>
				status1 = MAN_RED;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <fsm_manual_run+0x264>)
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
				setTimer1(1000);
 8000e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e3e:	f000 f99d 	bl	800117c <setTimer1>
			if (isButton2Pressed() == 1){
 8000e42:	f7ff f9e5 	bl	8000210 <isButton2Pressed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d104      	bne.n	8000e56 <fsm_manual_run+0x236>
				counter1++;
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <fsm_manual_run+0x278>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a11      	ldr	r2, [pc, #68]	; (8000e98 <fsm_manual_run+0x278>)
 8000e54:	6013      	str	r3, [r2, #0]
			if (isButton3Pressed() == 1){
 8000e56:	f7ff fa3d 	bl	80002d4 <isButton3Pressed>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d10e      	bne.n	8000e7e <fsm_manual_run+0x25e>
				yellow_time = 100*(counter1+1);
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <fsm_manual_run+0x278>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	3301      	adds	r3, #1
 8000e66:	2264      	movs	r2, #100	; 0x64
 8000e68:	fb02 f303 	mul.w	r3, r2, r3
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <fsm_manual_run+0x288>)
 8000e6e:	6013      	str	r3, [r2, #0]
			break;
 8000e70:	e005      	b.n	8000e7e <fsm_manual_run+0x25e>
			break;
 8000e72:	bf00      	nop
 8000e74:	e004      	b.n	8000e80 <fsm_manual_run+0x260>
			break;
 8000e76:	bf00      	nop
 8000e78:	e002      	b.n	8000e80 <fsm_manual_run+0x260>
			break;
 8000e7a:	bf00      	nop
 8000e7c:	e000      	b.n	8000e80 <fsm_manual_run+0x260>
			break;
 8000e7e:	bf00      	nop
	}
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000078 	.word	0x20000078
 8000e88:	2000007c 	.word	0x2000007c
 8000e8c:	40010800 	.word	0x40010800
 8000e90:	20000034 	.word	0x20000034
 8000e94:	51eb851f 	.word	0x51eb851f
 8000e98:	20000080 	.word	0x20000080
 8000e9c:	20000084 	.word	0x20000084
 8000ea0:	2000009c 	.word	0x2000009c
 8000ea4:	20000038 	.word	0x20000038
 8000ea8:	2000003c 	.word	0x2000003c

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f000 fb9b 	bl	80015ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f849 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000eba:	f000 f883 	bl	8000fc4 <MX_TIM2_Init>
  MX_GPIO_Init();
 8000ebe:	f000 f8cd 	bl	800105c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <main+0x8c>)
 8000ec4:	f001 fad8 	bl	8002478 <HAL_TIM_Base_Start_IT>
  status1 = INIT;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <main+0x90>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <main+0x94>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
  int led_idx = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(en0_GPIO_Port, en0_Pin, SET);
 8000ed8:	2201      	movs	r2, #1
 8000eda:	2102      	movs	r1, #2
 8000edc:	4819      	ldr	r0, [pc, #100]	; (8000f44 <main+0x98>)
 8000ede:	f000 fe86 	bl	8001bee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2104      	movs	r1, #4
 8000ee6:	4817      	ldr	r0, [pc, #92]	; (8000f44 <main+0x98>)
 8000ee8:	f000 fe81 	bl	8001bee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2108      	movs	r1, #8
 8000ef0:	4814      	ldr	r0, [pc, #80]	; (8000f44 <main+0x98>)
 8000ef2:	f000 fe7c 	bl	8001bee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, SET);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	2110      	movs	r1, #16
 8000efa:	4812      	ldr	r0, [pc, #72]	; (8000f44 <main+0x98>)
 8000efc:	f000 fe77 	bl	8001bee <HAL_GPIO_WritePin>
  setTimer4(10);
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 f9c5 	bl	8001290 <setTimer4>
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_automatic1_run();
 8000f06:	f7ff fc9b 	bl	8000840 <fsm_automatic1_run>
	  fsm_automatic2_run();
 8000f0a:	f7ff fda1 	bl	8000a50 <fsm_automatic2_run>
	  fsm_manual_run();
 8000f0e:	f7ff fe87 	bl	8000c20 <fsm_manual_run>
	  if (timer4_flag == 1){
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <main+0x9c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d1f5      	bne.n	8000f06 <main+0x5a>
		  setTimer4(10);
 8000f1a:	200a      	movs	r0, #10
 8000f1c:	f000 f9b8 	bl	8001290 <setTimer4>
		  if (led_idx >= 4) led_idx = 0;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	dd01      	ble.n	8000f2a <main+0x7e>
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
		  scanled(led_idx);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff fc04 	bl	8000738 <scanled>
		  led_idx++;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3301      	adds	r3, #1
 8000f34:	607b      	str	r3, [r7, #4]
	  fsm_automatic1_run();
 8000f36:	e7e6      	b.n	8000f06 <main+0x5a>
 8000f38:	200000c0 	.word	0x200000c0
 8000f3c:	20000078 	.word	0x20000078
 8000f40:	2000007c 	.word	0x2000007c
 8000f44:	40010800 	.word	0x40010800
 8000f48:	200000b4 	.word	0x200000b4

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b090      	sub	sp, #64	; 0x40
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	2228      	movs	r2, #40	; 0x28
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fe48 	bl	8002bf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f72:	2301      	movs	r3, #1
 8000f74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2310      	movs	r3, #16
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fe4c 	bl	8001c20 <HAL_RCC_OscConfig>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f8e:	f000 f8ef 	bl	8001170 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f92:	230f      	movs	r3, #15
 8000f94:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f8b8 	bl	8002120 <HAL_RCC_ClockConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 f8db 	bl	8001170 <Error_Handler>
  }
}
 8000fba:	bf00      	nop
 8000fbc:	3740      	adds	r7, #64	; 0x40
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_TIM2_Init+0x94>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_TIM2_Init+0x94>)
 8000fea:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000fee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ff8:	2209      	movs	r2, #9
 8000ffa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_TIM2_Init+0x94>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_TIM2_Init+0x94>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001008:	4813      	ldr	r0, [pc, #76]	; (8001058 <MX_TIM2_Init+0x94>)
 800100a:	f001 f9e5 	bl	80023d8 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001014:	f000 f8ac 	bl	8001170 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101e:	f107 0308 	add.w	r3, r7, #8
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	; (8001058 <MX_TIM2_Init+0x94>)
 8001026:	f001 fb7b 	bl	8002720 <HAL_TIM_ConfigClockSource>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001030:	f000 f89e 	bl	8001170 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM2_Init+0x94>)
 8001042:	f001 fd47 	bl	8002ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800104c:	f000 f890 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200000c0 	.word	0x200000c0

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <MX_GPIO_Init+0xd0>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a2d      	ldr	r2, [pc, #180]	; (800112c <MX_GPIO_Init+0xd0>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b2b      	ldr	r3, [pc, #172]	; (800112c <MX_GPIO_Init+0xd0>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <MX_GPIO_Init+0xd0>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a27      	ldr	r2, [pc, #156]	; (800112c <MX_GPIO_Init+0xd0>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <MX_GPIO_Init+0xd0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <MX_GPIO_Init+0xd0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <MX_GPIO_Init+0xd0>)
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <MX_GPIO_Init+0xd0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, en0_Pin|en1_Pin|en2_Pin|en3_Pin
 80010b8:	2200      	movs	r2, #0
 80010ba:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80010be:	481c      	ldr	r0, [pc, #112]	; (8001130 <MX_GPIO_Init+0xd4>)
 80010c0:	f000 fd95 	bl	8001bee <HAL_GPIO_WritePin>
                          |LED_RED1_Pin|LED_YEL1_Pin|LED_GRE1_Pin|LED_RED2_Pin
                          |LED_YEL2_Pin|LED_GRE2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_A_Pin|Led_B_Pin|Led_C_Pin|Led_D_Pin
 80010c4:	2200      	movs	r2, #0
 80010c6:	217f      	movs	r1, #127	; 0x7f
 80010c8:	481a      	ldr	r0, [pc, #104]	; (8001134 <MX_GPIO_Init+0xd8>)
 80010ca:	f000 fd90 	bl	8001bee <HAL_GPIO_WritePin>
                          |Led_E_Pin|Led_F_Pin|Led_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80010ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d8:	2301      	movs	r3, #1
 80010da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4619      	mov	r1, r3
 80010e2:	4815      	ldr	r0, [pc, #84]	; (8001138 <MX_GPIO_Init+0xdc>)
 80010e4:	f000 fbf2 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : en0_Pin en1_Pin en2_Pin en3_Pin
                           LED_RED1_Pin LED_YEL1_Pin LED_GRE1_Pin LED_RED2_Pin
                           LED_YEL2_Pin LED_GRE2_Pin */
  GPIO_InitStruct.Pin = en0_Pin|en1_Pin|en2_Pin|en3_Pin
 80010e8:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80010ec:	613b      	str	r3, [r7, #16]
                          |LED_RED1_Pin|LED_YEL1_Pin|LED_GRE1_Pin|LED_RED2_Pin
                          |LED_YEL2_Pin|LED_GRE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0310 	add.w	r3, r7, #16
 80010fe:	4619      	mov	r1, r3
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_GPIO_Init+0xd4>)
 8001102:	f000 fbe3 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_A_Pin Led_B_Pin Led_C_Pin Led_D_Pin
                           Led_E_Pin Led_F_Pin Led_G_Pin */
  GPIO_InitStruct.Pin = Led_A_Pin|Led_B_Pin|Led_C_Pin|Led_D_Pin
 8001106:	237f      	movs	r3, #127	; 0x7f
 8001108:	613b      	str	r3, [r7, #16]
                          |Led_E_Pin|Led_F_Pin|Led_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110a:	2301      	movs	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2302      	movs	r3, #2
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <MX_GPIO_Init+0xd8>)
 800111e:	f000 fbd5 	bl	80018cc <HAL_GPIO_Init>

}
 8001122:	bf00      	nop
 8001124:	3720      	adds	r7, #32
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000

0800113c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
	timer1Run();
 8001144:	f000 f82e 	bl	80011a4 <timer1Run>
	timer2Run();
 8001148:	f000 f85a 	bl	8001200 <timer2Run>
	timer3Run();
 800114c:	f000 f886 	bl	800125c <timer3Run>
	timer4Run();
 8001150:	f000 f8b2 	bl	80012b8 <timer4Run>
	timer5Run();
 8001154:	f000 f8de 	bl	8001314 <timer5Run>
	getKeyInput1();
 8001158:	f7ff f80a 	bl	8000170 <getKeyInput1>
	getKeyInput2();
 800115c:	f7ff f86a 	bl	8000234 <getKeyInput2>
	getKeyInput3();
 8001160:	f7ff f8ca 	bl	80002f8 <getKeyInput3>
	update_buffer();
 8001164:	f7ff f918 	bl	8000398 <update_buffer>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <setTimer1>:

///////////////////////////////////////////
int timer1_counter = 0;
int timer1_flag = 0;

void setTimer1(int duration) {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001184:	4a05      	ldr	r2, [pc, #20]	; (800119c <setTimer1+0x20>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <setTimer1+0x24>)
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000098 	.word	0x20000098
 80011a0:	2000009c 	.word	0x2000009c

080011a4 <timer1Run>:

void timer1Run(){
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <timer1Run+0x2c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	dd0b      	ble.n	80011c8 <timer1Run+0x24>
		timer1_counter--;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <timer1Run+0x2c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a06      	ldr	r2, [pc, #24]	; (80011d0 <timer1Run+0x2c>)
 80011b8:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80011ba:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <timer1Run+0x2c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	dc02      	bgt.n	80011c8 <timer1Run+0x24>
			timer1_flag = 1;
 80011c2:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <timer1Run+0x30>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000098 	.word	0x20000098
 80011d4:	2000009c 	.word	0x2000009c

080011d8 <setTimer2>:
//////////////////////////////////////////
int timer2_counter = 0;
int timer2_flag = 0;

void setTimer2(int duration) {
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <setTimer2+0x20>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80011e6:	4b05      	ldr	r3, [pc, #20]	; (80011fc <setTimer2+0x24>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200000a0 	.word	0x200000a0
 80011fc:	200000a4 	.word	0x200000a4

08001200 <timer2Run>:

void timer2Run(){
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	if (timer2_counter > 0){
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <timer2Run+0x2c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	dd0b      	ble.n	8001224 <timer2Run+0x24>
		timer2_counter--;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <timer2Run+0x2c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3b01      	subs	r3, #1
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <timer2Run+0x2c>)
 8001214:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <timer2Run+0x2c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	dc02      	bgt.n	8001224 <timer2Run+0x24>
			timer2_flag = 1;
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <timer2Run+0x30>)
 8001220:	2201      	movs	r2, #1
 8001222:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	200000a0 	.word	0x200000a0
 8001230:	200000a4 	.word	0x200000a4

08001234 <setTimer3>:
/////////////////////////////////////////
int timer3_counter = 0;
int timer3_flag = 0;

void setTimer3(int duration) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 800123c:	4a05      	ldr	r2, [pc, #20]	; (8001254 <setTimer3+0x20>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <setTimer3+0x24>)
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200000a8 	.word	0x200000a8
 8001258:	200000ac 	.word	0x200000ac

0800125c <timer3Run>:

void timer3Run(){
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	if (timer3_counter > 0){
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <timer3Run+0x2c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	dd0b      	ble.n	8001280 <timer3Run+0x24>
		timer3_counter--;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <timer3Run+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3b01      	subs	r3, #1
 800126e:	4a06      	ldr	r2, [pc, #24]	; (8001288 <timer3Run+0x2c>)
 8001270:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <timer3Run+0x2c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	dc02      	bgt.n	8001280 <timer3Run+0x24>
			timer3_flag = 1;
 800127a:	4b04      	ldr	r3, [pc, #16]	; (800128c <timer3Run+0x30>)
 800127c:	2201      	movs	r2, #1
 800127e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	200000a8 	.word	0x200000a8
 800128c:	200000ac 	.word	0x200000ac

08001290 <setTimer4>:
//////////////////////////////////////////
int timer4_counter = 0;
int timer4_flag = 0;

void setTimer4(int duration) {
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001298:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <setTimer4+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <setTimer4+0x24>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200000b0 	.word	0x200000b0
 80012b4:	200000b4 	.word	0x200000b4

080012b8 <timer4Run>:

void timer4Run(){
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
	if (timer4_counter > 0){
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <timer4Run+0x2c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dd0b      	ble.n	80012dc <timer4Run+0x24>
		timer4_counter--;
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <timer4Run+0x2c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <timer4Run+0x2c>)
 80012cc:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <timer4Run+0x2c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	dc02      	bgt.n	80012dc <timer4Run+0x24>
			timer4_flag = 1;
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <timer4Run+0x30>)
 80012d8:	2201      	movs	r2, #1
 80012da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	200000b0 	.word	0x200000b0
 80012e8:	200000b4 	.word	0x200000b4

080012ec <setTimer5>:
/////////////////////////////////////////
int timer5_counter = 0;
int timer5_flag = 0;

void setTimer5(int duration) {
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 80012f4:	4a05      	ldr	r2, [pc, #20]	; (800130c <setTimer5+0x20>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <setTimer5+0x24>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200000b8 	.word	0x200000b8
 8001310:	200000bc 	.word	0x200000bc

08001314 <timer5Run>:

void timer5Run(){
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
	if (timer5_counter > 0){
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <timer5Run+0x2c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	dd0b      	ble.n	8001338 <timer5Run+0x24>
		timer5_counter--;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <timer5Run+0x2c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	3b01      	subs	r3, #1
 8001326:	4a06      	ldr	r2, [pc, #24]	; (8001340 <timer5Run+0x2c>)
 8001328:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <timer5Run+0x2c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	dc02      	bgt.n	8001338 <timer5Run+0x24>
			timer5_flag = 1;
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <timer5Run+0x30>)
 8001334:	2201      	movs	r2, #1
 8001336:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200000b8 	.word	0x200000b8
 8001344:	200000bc 	.word	0x200000bc

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_MspInit+0x5c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_MspInit+0x5c>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_MspInit+0x5c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_MspInit+0x5c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <HAL_MspInit+0x5c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_MspInit+0x60>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_MspInit+0x60>)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013bc:	d113      	bne.n	80013e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	61d3      	str	r3, [r2, #28]
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_TIM_Base_MspInit+0x44>)
 80013cc:	69db      	ldr	r3, [r3, #28]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	201c      	movs	r0, #28
 80013dc:	f000 fa3f 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013e0:	201c      	movs	r0, #28
 80013e2:	f000 fa58 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr

08001436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143a:	f000 f91d 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <TIM2_IRQHandler+0x10>)
 800144a:	f001 f861 	bl	8002510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000c0 	.word	0x200000c0

08001458 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <light1>:
 *      Author: DELL F89F
 */

#include "trafficlight.h"

void light1(int color){
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	switch (color) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001472:	d02a      	beq.n	80014ca <light1+0x66>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800147a:	dc36      	bgt.n	80014ea <light1+0x86>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d003      	beq.n	800148a <light1+0x26>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2bc8      	cmp	r3, #200	; 0xc8
 8001486:	d010      	beq.n	80014aa <light1+0x46>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
			HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, SET);
			HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, RESET);
			break;
		default:
			break;
 8001488:	e02f      	b.n	80014ea <light1+0x86>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	2120      	movs	r1, #32
 800148e:	4819      	ldr	r0, [pc, #100]	; (80014f4 <light1+0x90>)
 8001490:	f000 fbad 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <light1+0x90>)
 800149a:	f000 fba8 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, SET);
 800149e:	2201      	movs	r2, #1
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <light1+0x90>)
 80014a4:	f000 fba3 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80014a8:	e020      	b.n	80014ec <light1+0x88>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2120      	movs	r1, #32
 80014ae:	4811      	ldr	r0, [pc, #68]	; (80014f4 <light1+0x90>)
 80014b0:	f000 fb9d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2140      	movs	r1, #64	; 0x40
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <light1+0x90>)
 80014ba:	f000 fb98 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2180      	movs	r1, #128	; 0x80
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <light1+0x90>)
 80014c4:	f000 fb93 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80014c8:	e010      	b.n	80014ec <light1+0x88>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2120      	movs	r1, #32
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <light1+0x90>)
 80014d0:	f000 fb8d 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL1_GPIO_Port, LED_YEL1_Pin, SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	2140      	movs	r1, #64	; 0x40
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <light1+0x90>)
 80014da:	f000 fb88 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE1_GPIO_Port, LED_GRE1_Pin, RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <light1+0x90>)
 80014e4:	f000 fb83 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 80014e8:	e000      	b.n	80014ec <light1+0x88>
			break;
 80014ea:	bf00      	nop
	}
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40010800 	.word	0x40010800

080014f8 <light2>:

void light2(int color){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	switch (color) {
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001506:	d030      	beq.n	800156a <light2+0x72>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800150e:	dc3f      	bgt.n	8001590 <light2+0x98>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d003      	beq.n	800151e <light2+0x26>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2bc8      	cmp	r3, #200	; 0xc8
 800151a:	d013      	beq.n	8001544 <light2+0x4c>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, RESET);
			break;
		default:
			break;
 800151c:	e038      	b.n	8001590 <light2+0x98>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <light2+0xa4>)
 8001526:	f000 fb62 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 800152a:	2201      	movs	r2, #1
 800152c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001530:	481a      	ldr	r0, [pc, #104]	; (800159c <light2+0xa4>)
 8001532:	f000 fb5c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 8001536:	2201      	movs	r2, #1
 8001538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153c:	4817      	ldr	r0, [pc, #92]	; (800159c <light2+0xa4>)
 800153e:	f000 fb56 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8001542:	e026      	b.n	8001592 <light2+0x9a>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4814      	ldr	r0, [pc, #80]	; (800159c <light2+0xa4>)
 800154c:	f000 fb4f 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001556:	4811      	ldr	r0, [pc, #68]	; (800159c <light2+0xa4>)
 8001558:	f000 fb49 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, SET);
 800155c:	2201      	movs	r2, #1
 800155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <light2+0xa4>)
 8001564:	f000 fb43 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 8001568:	e013      	b.n	8001592 <light2+0x9a>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 800156a:	2201      	movs	r2, #1
 800156c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001570:	480a      	ldr	r0, [pc, #40]	; (800159c <light2+0xa4>)
 8001572:	f000 fb3c 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YEL2_GPIO_Port, LED_YEL2_Pin, SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 7100 	mov.w	r1, #512	; 0x200
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <light2+0xa4>)
 800157e:	f000 fb36 	bl	8001bee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GRE2_GPIO_Port, LED_GRE2_Pin, RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001588:	4804      	ldr	r0, [pc, #16]	; (800159c <light2+0xa4>)
 800158a:	f000 fb30 	bl	8001bee <HAL_GPIO_WritePin>
			break;
 800158e:	e000      	b.n	8001592 <light2+0x9a>
			break;
 8001590:	bf00      	nop
	}
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40010800 	.word	0x40010800

080015a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a0:	f7ff ff5a 	bl	8001458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015a6:	490c      	ldr	r1, [pc, #48]	; (80015d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015bc:	4c09      	ldr	r4, [pc, #36]	; (80015e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ca:	f001 faed 	bl	8002ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fc6d 	bl	8000eac <main>
  bx lr
 80015d2:	4770      	bx	lr
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80015dc:	08002c44 	.word	0x08002c44
  ldr r2, =_sbss
 80015e0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80015e4:	2000010c 	.word	0x2000010c

080015e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>
	...

080015ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_Init+0x28>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_Init+0x28>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f000 f923 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001602:	200f      	movs	r0, #15
 8001604:	f000 f808 	bl	8001618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fe9e 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_InitTick+0x54>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x58>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800162e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001632:	fbb2 f3f3 	udiv	r3, r2, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f93b 	bl	80018b2 <HAL_SYSTICK_Config>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e00e      	b.n	8001664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d80a      	bhi.n	8001662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	f04f 30ff 	mov.w	r0, #4294967295
 8001654:	f000 f903 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <HAL_InitTick+0x5c>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000044 	.word	0x20000044
 8001670:	2000004c 	.word	0x2000004c
 8001674:	20000048 	.word	0x20000048

08001678 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_IncTick+0x1c>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a03      	ldr	r2, [pc, #12]	; (8001698 <HAL_IncTick+0x20>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	2000004c 	.word	0x2000004c
 8001698:	20000108 	.word	0x20000108

0800169c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return uwTick;
 80016a0:	4b02      	ldr	r3, [pc, #8]	; (80016ac <HAL_GetTick+0x10>)
 80016a2:	681b      	ldr	r3, [r3, #0]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr
 80016ac:	20000108 	.word	0x20000108

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4906      	ldr	r1, [pc, #24]	; (8001748 <__NVIC_EnableIRQ+0x34>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff90 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff2d 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff42 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff90 	bl	80017a0 <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5f 	bl	800174c <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff35 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e148      	b.n	8001b72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8137 	bne.w	8001b6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4aa3      	ldr	r2, [pc, #652]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d05e      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001908:	4aa1      	ldr	r2, [pc, #644]	; (8001b90 <HAL_GPIO_Init+0x2c4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d875      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800190e:	4aa1      	ldr	r2, [pc, #644]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d058      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001914:	4a9f      	ldr	r2, [pc, #636]	; (8001b94 <HAL_GPIO_Init+0x2c8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d86f      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800191a:	4a9f      	ldr	r2, [pc, #636]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d052      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001920:	4a9d      	ldr	r2, [pc, #628]	; (8001b98 <HAL_GPIO_Init+0x2cc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d869      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001926:	4a9d      	ldr	r2, [pc, #628]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d04c      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 800192c:	4a9b      	ldr	r2, [pc, #620]	; (8001b9c <HAL_GPIO_Init+0x2d0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d863      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001932:	4a9b      	ldr	r2, [pc, #620]	; (8001ba0 <HAL_GPIO_Init+0x2d4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d046      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
 8001938:	4a99      	ldr	r2, [pc, #612]	; (8001ba0 <HAL_GPIO_Init+0x2d4>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d85d      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 800193e:	2b12      	cmp	r3, #18
 8001940:	d82a      	bhi.n	8001998 <HAL_GPIO_Init+0xcc>
 8001942:	2b12      	cmp	r3, #18
 8001944:	d859      	bhi.n	80019fa <HAL_GPIO_Init+0x12e>
 8001946:	a201      	add	r2, pc, #4	; (adr r2, 800194c <HAL_GPIO_Init+0x80>)
 8001948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194c:	080019c7 	.word	0x080019c7
 8001950:	080019a1 	.word	0x080019a1
 8001954:	080019b3 	.word	0x080019b3
 8001958:	080019f5 	.word	0x080019f5
 800195c:	080019fb 	.word	0x080019fb
 8001960:	080019fb 	.word	0x080019fb
 8001964:	080019fb 	.word	0x080019fb
 8001968:	080019fb 	.word	0x080019fb
 800196c:	080019fb 	.word	0x080019fb
 8001970:	080019fb 	.word	0x080019fb
 8001974:	080019fb 	.word	0x080019fb
 8001978:	080019fb 	.word	0x080019fb
 800197c:	080019fb 	.word	0x080019fb
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019fb 	.word	0x080019fb
 8001988:	080019fb 	.word	0x080019fb
 800198c:	080019fb 	.word	0x080019fb
 8001990:	080019a9 	.word	0x080019a9
 8001994:	080019bd 	.word	0x080019bd
 8001998:	4a82      	ldr	r2, [pc, #520]	; (8001ba4 <HAL_GPIO_Init+0x2d8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800199e:	e02c      	b.n	80019fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	623b      	str	r3, [r7, #32]
          break;
 80019a6:	e029      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	3304      	adds	r3, #4
 80019ae:	623b      	str	r3, [r7, #32]
          break;
 80019b0:	e024      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	3308      	adds	r3, #8
 80019b8:	623b      	str	r3, [r7, #32]
          break;
 80019ba:	e01f      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	330c      	adds	r3, #12
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	e01a      	b.n	80019fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2304      	movs	r3, #4
 80019d0:	623b      	str	r3, [r7, #32]
          break;
 80019d2:	e013      	b.n	80019fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d105      	bne.n	80019e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	611a      	str	r2, [r3, #16]
          break;
 80019e6:	e009      	b.n	80019fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019e8:	2308      	movs	r3, #8
 80019ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	615a      	str	r2, [r3, #20]
          break;
 80019f2:	e003      	b.n	80019fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e000      	b.n	80019fc <HAL_GPIO_Init+0x130>
          break;
 80019fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	2bff      	cmp	r3, #255	; 0xff
 8001a00:	d801      	bhi.n	8001a06 <HAL_GPIO_Init+0x13a>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_Init+0x13e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2bff      	cmp	r3, #255	; 0xff
 8001a10:	d802      	bhi.n	8001a18 <HAL_GPIO_Init+0x14c>
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	e002      	b.n	8001a1e <HAL_GPIO_Init+0x152>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3b08      	subs	r3, #8
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	210f      	movs	r1, #15
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	401a      	ands	r2, r3
 8001a30:	6a39      	ldr	r1, [r7, #32]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8090 	beq.w	8001b6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a4c:	4b56      	ldr	r3, [pc, #344]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	4a55      	ldr	r2, [pc, #340]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6193      	str	r3, [r2, #24]
 8001a58:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <HAL_GPIO_Init+0x2dc>)
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a64:	4a51      	ldr	r2, [pc, #324]	; (8001bac <HAL_GPIO_Init+0x2e0>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	089b      	lsrs	r3, r3, #2
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	220f      	movs	r2, #15
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a49      	ldr	r2, [pc, #292]	; (8001bb0 <HAL_GPIO_Init+0x2e4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d00d      	beq.n	8001aac <HAL_GPIO_Init+0x1e0>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a48      	ldr	r2, [pc, #288]	; (8001bb4 <HAL_GPIO_Init+0x2e8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d007      	beq.n	8001aa8 <HAL_GPIO_Init+0x1dc>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a47      	ldr	r2, [pc, #284]	; (8001bb8 <HAL_GPIO_Init+0x2ec>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d101      	bne.n	8001aa4 <HAL_GPIO_Init+0x1d8>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e004      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e002      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <HAL_GPIO_Init+0x1e2>
 8001aac:	2300      	movs	r3, #0
 8001aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab0:	f002 0203 	and.w	r2, r2, #3
 8001ab4:	0092      	lsls	r2, r2, #2
 8001ab6:	4093      	lsls	r3, r2
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001abe:	493b      	ldr	r1, [pc, #236]	; (8001bac <HAL_GPIO_Init+0x2e0>)
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d006      	beq.n	8001ae6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ad8:	4b38      	ldr	r3, [pc, #224]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
 8001ae4:	e006      	b.n	8001af4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b35      	ldr	r3, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	4933      	ldr	r1, [pc, #204]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d006      	beq.n	8001b0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	492d      	ldr	r1, [pc, #180]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60cb      	str	r3, [r1, #12]
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b2b      	ldr	r3, [pc, #172]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4929      	ldr	r1, [pc, #164]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d006      	beq.n	8001b36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	4923      	ldr	r1, [pc, #140]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	491f      	ldr	r1, [pc, #124]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4919      	ldr	r1, [pc, #100]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e006      	b.n	8001b6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	4915      	ldr	r1, [pc, #84]	; (8001bbc <HAL_GPIO_Init+0x2f0>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6e:	3301      	adds	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f47f aeaf 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001b82:	bf00      	nop
 8001b84:	bf00      	nop
 8001b86:	372c      	adds	r7, #44	; 0x2c
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	10320000 	.word	0x10320000
 8001b94:	10310000 	.word	0x10310000
 8001b98:	10220000 	.word	0x10220000
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	10120000 	.word	0x10120000
 8001ba4:	10110000 	.word	0x10110000
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40010800 	.word	0x40010800
 8001bb4:	40010c00 	.word	0x40010c00
 8001bb8:	40011000 	.word	0x40011000
 8001bbc:	40010400 	.word	0x40010400

08001bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	887b      	ldrh	r3, [r7, #2]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
 8001bdc:	e001      	b.n	8001be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfe:	787b      	ldrb	r3, [r7, #1]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c0a:	e003      	b.n	8001c14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	041a      	lsls	r2, r3, #16
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	611a      	str	r2, [r3, #16]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e26c      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e246      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcce 	bl	800169c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fcca 	bl	800169c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1fa      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fcba 	bl	800169c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fcb6 	bl	800169c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1e6      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1ba      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc6f 	bl	800169c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc6b 	bl	800169c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e19b      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc4e 	bl	800169c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc4a 	bl	800169c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e17a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fc2e 	bl	800169c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc2a 	bl	800169c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e15a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 fa9a 	bl	800239c <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fc14 	bl	800169c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fc10 	bl	800169c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e140      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b9e      	ldr	r3, [pc, #632]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a93      	ldr	r2, [pc, #588]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b8b      	ldr	r3, [pc, #556]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8a      	ldr	r2, [pc, #552]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbd1 	bl	800169c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fbcd 	bl	800169c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0fd      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a7a      	ldr	r2, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a6c      	ldr	r2, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a63      	ldr	r2, [pc, #396]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb81 	bl	800169c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fb7d 	bl	800169c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ab      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb6b 	bl	800169c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb67 	bl	800169c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e095      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8081 	beq.w	800210a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fb3b 	bl	800169c <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fb37 	bl	800169c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e067      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	492d      	ldr	r1, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff fb0b 	bl	800169c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff fb07 	bl	800169c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e037      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e02f      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff faf4 	bl	800169c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff faf0 	bl	800169c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e020      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e018      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	42420060 	.word	0x42420060

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4965      	ldr	r1, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800219e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e073      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff fa44 	bl	800169c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff fa40 	bl	800169c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f821 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490a      	ldr	r1, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1cc>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f9a2 	bl	8001618 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08002c18 	.word	0x08002c18
 80022ec:	20000044 	.word	0x20000044
 80022f0:	20000048 	.word	0x20000048

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	2300      	movs	r3, #0
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x30>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d003      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x36>
 8002322:	e027      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002324:	4b19      	ldr	r3, [pc, #100]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	e027      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	0c9b      	lsrs	r3, r3, #18
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a17      	ldr	r2, [pc, #92]	; (8002390 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d010      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_RCC_GetSysClockFreq+0x94>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	0c5b      	lsrs	r3, r3, #17
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_RCC_GetSysClockFreq+0xa0>)
 800234e:	5cd3      	ldrb	r3, [r2, r3]
 8002350:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a0d      	ldr	r2, [pc, #52]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002356:	fb02 f203 	mul.w	r2, r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e004      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0c      	ldr	r2, [pc, #48]	; (8002398 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002368:	fb02 f303 	mul.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	613b      	str	r3, [r7, #16]
      break;
 8002372:	e002      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <HAL_RCC_GetSysClockFreq+0x98>)
 8002376:	613b      	str	r3, [r7, #16]
      break;
 8002378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237a:	693b      	ldr	r3, [r7, #16]
}
 800237c:	4618      	mov	r0, r3
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	007a1200 	.word	0x007a1200
 8002390:	08002c28 	.word	0x08002c28
 8002394:	08002c38 	.word	0x08002c38
 8002398:	003d0900 	.word	0x003d0900

0800239c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <RCC_Delay+0x34>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <RCC_Delay+0x38>)
 80023aa:	fba2 2303 	umull	r2, r3, r2, r3
 80023ae:	0a5b      	lsrs	r3, r3, #9
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	fb02 f303 	mul.w	r3, r2, r3
 80023b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b8:	bf00      	nop
  }
  while (Delay --);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	60fa      	str	r2, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <RCC_Delay+0x1c>
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000044 	.word	0x20000044
 80023d4:	10624dd3 	.word	0x10624dd3

080023d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e041      	b.n	800246e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe ffd4 	bl	80013ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4610      	mov	r0, r2
 8002418:	f000 fa6e 	bl	80028f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d001      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e035      	b.n	80024fc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a16      	ldr	r2, [pc, #88]	; (8002508 <HAL_TIM_Base_Start_IT+0x90>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_Base_Start_IT+0x4e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_Base_Start_IT+0x4e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	; (800250c <HAL_TIM_Base_Start_IT+0x94>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e8:	e007      	b.n	80024fa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40012c00 	.word	0x40012c00
 800250c:	40000400 	.word	0x40000400

08002510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b02      	cmp	r3, #2
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b02      	cmp	r3, #2
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0202 	mvn.w	r2, #2
 800253c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9b4 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f9a7 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f9b6 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b04      	cmp	r3, #4
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0204 	mvn.w	r2, #4
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f98a 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f97d 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f98c 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0208 	mvn.w	r2, #8
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f960 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f953 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f962 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b10      	cmp	r3, #16
 8002620:	d122      	bne.n	8002668 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b10      	cmp	r3, #16
 800262e:	d11b      	bne.n	8002668 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0210 	mvn.w	r2, #16
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2208      	movs	r2, #8
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f936 	bl	80028c0 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f929 	bl	80028ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f938 	bl	80028d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d10e      	bne.n	8002694 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d107      	bne.n	8002694 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0201 	mvn.w	r2, #1
 800268c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7fe fd54 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269e:	2b80      	cmp	r3, #128	; 0x80
 80026a0:	d10e      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ac:	2b80      	cmp	r3, #128	; 0x80
 80026ae:	d107      	bne.n	80026c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa6b 	bl	8002b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d10e      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d107      	bne.n	80026ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f8fc 	bl	80028e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d10e      	bne.n	8002718 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d107      	bne.n	8002718 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f06f 0220 	mvn.w	r2, #32
 8002710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fa36 	bl	8002b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002718:	bf00      	nop
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_TIM_ConfigClockSource+0x1c>
 8002738:	2302      	movs	r3, #2
 800273a:	e0b4      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x186>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800275a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d03e      	beq.n	80027f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800277a:	f200 8087 	bhi.w	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	f000 8086 	beq.w	8002892 <HAL_TIM_ConfigClockSource+0x172>
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	d87f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b70      	cmp	r3, #112	; 0x70
 800278e:	d01a      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d87b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b60      	cmp	r3, #96	; 0x60
 8002796:	d050      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x11a>
 8002798:	2b60      	cmp	r3, #96	; 0x60
 800279a:	d877      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b50      	cmp	r3, #80	; 0x50
 800279e:	d03c      	beq.n	800281a <HAL_TIM_ConfigClockSource+0xfa>
 80027a0:	2b50      	cmp	r3, #80	; 0x50
 80027a2:	d873      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b40      	cmp	r3, #64	; 0x40
 80027a6:	d058      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x13a>
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	d86f      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b30      	cmp	r3, #48	; 0x30
 80027ae:	d064      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b30      	cmp	r3, #48	; 0x30
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b20      	cmp	r3, #32
 80027ba:	d867      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05c      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d05a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x15a>
 80027c4:	e062      	b.n	800288c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6899      	ldr	r1, [r3, #8]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f000 f95e 	bl	8002a96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	609a      	str	r2, [r3, #8]
      break;
 80027f2:	e04f      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6899      	ldr	r1, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f000 f947 	bl	8002a96 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	f000 f8be 	bl	80029a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	; 0x50
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f915 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002838:	e02c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	461a      	mov	r2, r3
 8002848:	f000 f8dc 	bl	8002a04 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	; 0x60
 8002852:	4618      	mov	r0, r3
 8002854:	f000 f905 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002858:	e01c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f89e 	bl	80029a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f8f5 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002878:	e00c      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f000 f8ec 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 800288a:	e003      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
      break;
 8002890:	e000      	b.n	8002894 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr
	...

080028f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d003      	beq.n	8002920 <TIM_Base_SetConfig+0x28>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a22      	ldr	r2, [pc, #136]	; (80029a4 <TIM_Base_SetConfig+0xac>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d108      	bne.n	8002932 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002926:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0x52>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <TIM_Base_SetConfig+0xac>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <TIM_Base_SetConfig+0xa8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400

080029a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f023 030a 	bic.w	r3, r3, #10
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	621a      	str	r2, [r3, #32]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	f023 0210 	bic.w	r2, r3, #16
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a40:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	621a      	str	r2, [r3, #32]
}
 8002a58:	bf00      	nop
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f043 0307 	orr.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b087      	sub	sp, #28
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	021a      	lsls	r2, r3, #8
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	609a      	str	r2, [r3, #8]
}
 8002aca:	bf00      	nop
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d101      	bne.n	8002aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e041      	b.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d009      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b38:	d004      	beq.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10c      	bne.n	8002b5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400

08002b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bc80      	pop	{r7}
 8002b94:	4770      	bx	lr

08002b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr

08002ba8 <__libc_init_array>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	2600      	movs	r6, #0
 8002bac:	4d0c      	ldr	r5, [pc, #48]	; (8002be0 <__libc_init_array+0x38>)
 8002bae:	4c0d      	ldr	r4, [pc, #52]	; (8002be4 <__libc_init_array+0x3c>)
 8002bb0:	1b64      	subs	r4, r4, r5
 8002bb2:	10a4      	asrs	r4, r4, #2
 8002bb4:	42a6      	cmp	r6, r4
 8002bb6:	d109      	bne.n	8002bcc <__libc_init_array+0x24>
 8002bb8:	f000 f822 	bl	8002c00 <_init>
 8002bbc:	2600      	movs	r6, #0
 8002bbe:	4d0a      	ldr	r5, [pc, #40]	; (8002be8 <__libc_init_array+0x40>)
 8002bc0:	4c0a      	ldr	r4, [pc, #40]	; (8002bec <__libc_init_array+0x44>)
 8002bc2:	1b64      	subs	r4, r4, r5
 8002bc4:	10a4      	asrs	r4, r4, #2
 8002bc6:	42a6      	cmp	r6, r4
 8002bc8:	d105      	bne.n	8002bd6 <__libc_init_array+0x2e>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
 8002bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd0:	4798      	blx	r3
 8002bd2:	3601      	adds	r6, #1
 8002bd4:	e7ee      	b.n	8002bb4 <__libc_init_array+0xc>
 8002bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bda:	4798      	blx	r3
 8002bdc:	3601      	adds	r6, #1
 8002bde:	e7f2      	b.n	8002bc6 <__libc_init_array+0x1e>
 8002be0:	08002c3c 	.word	0x08002c3c
 8002be4:	08002c3c 	.word	0x08002c3c
 8002be8:	08002c3c 	.word	0x08002c3c
 8002bec:	08002c40 	.word	0x08002c40

08002bf0 <memset>:
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	4402      	add	r2, r0
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d100      	bne.n	8002bfa <memset+0xa>
 8002bf8:	4770      	bx	lr
 8002bfa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bfe:	e7f9      	b.n	8002bf4 <memset+0x4>

08002c00 <_init>:
 8002c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c02:	bf00      	nop
 8002c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c06:	bc08      	pop	{r3}
 8002c08:	469e      	mov	lr, r3
 8002c0a:	4770      	bx	lr

08002c0c <_fini>:
 8002c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0e:	bf00      	nop
 8002c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c12:	bc08      	pop	{r3}
 8002c14:	469e      	mov	lr, r3
 8002c16:	4770      	bx	lr
